"use strict";(self.webpackChunkmy_portfolio=self.webpackChunkmy_portfolio||[]).push([[181],{3905:function(e,t,a){a.d(t,{Zo:function(){return p},kt:function(){return h}});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=n.createContext({}),u=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},p=function(e){var t=u(e.components);return n.createElement(l.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),c=u(a),m=r,h=c["".concat(l,".").concat(m)]||c[m]||d[m]||i;return a?n.createElement(h,o(o({ref:t},p),{},{components:a})):n.createElement(h,o({ref:t},p))}));function h(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,o=new Array(i);o[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[c]="string"==typeof e?e:r,o[1]=s;for(var u=2;u<i;u++)o[u]=a[u];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},8842:function(e,t,a){a.r(t),a.d(t,{assets:function(){return p},contentTitle:function(){return l},default:function(){return h},frontMatter:function(){return s},metadata:function(){return u},toc:function(){return c}});var n=a(7462),r=a(3366),i=(a(7294),a(3905)),o=["components"],s={title:"Docker Vs Virtual Machines(VMs)",author:"Divya Bhushan",authorURL:"https://github.com/divyabhushan",authorImageURL:"https://avatars0.githubusercontent.com/u/11659160?"},l=void 0,u={permalink:"/blog/2019/05/10/docker-vs-VMs",source:"@site/blog/2019-05-10-docker-vs-VMs.md",title:"Docker Vs Virtual Machines(VMs)",description:"Virtualization comes in handy with the need of running multiple simulated environments in a single machine without installing and configuring each instance. Virtualization has its used cases in many scenarios such as testing your app in multiple environments/devices.",date:"2019-05-10T00:00:00.000Z",formattedDate:"May 10, 2019",tags:[],readingTime:20.2,hasTruncateMarker:!0,authors:[{name:"Divya Bhushan",url:"https://github.com/divyabhushan",imageURL:"https://avatars0.githubusercontent.com/u/11659160?"}],frontMatter:{title:"Docker Vs Virtual Machines(VMs)",author:"Divya Bhushan",authorURL:"https://github.com/divyabhushan",authorImageURL:"https://avatars0.githubusercontent.com/u/11659160?"},prevItem:{title:"DevOps Interview Questions and Answers - Part I - Basics",permalink:"/blog/2019/06/10/devops-interview-questions-answers"}},p={authorsImageUrls:[void 0]},c=[{value:"What a machine needs?",id:"what-a-machine-needs",level:2},{value:"<strong>How to manage huge data - Servers</strong>",id:"how-to-manage-huge-data---servers",level:2},{value:"<strong>Many Servers approach challenge:</strong>",id:"many-servers-approach-challenge",level:3},{value:"<strong>Virtualization</strong>",id:"virtualization",level:2},{value:"What is Virtualization",id:"what-is-virtualization",level:3},{value:"<em>What is a Virtual machine</em>",id:"what-is-a-virtual-machine",level:3},{value:"<em>Need</em> <em>for</em> <em>virtualization</em>",id:"need-for-virtualization",level:3},{value:"<em>Implementation</em>",id:"implementation",level:2},{value:"<em>a) What is hypervisor and its types__?</em>",id:"a-what-is-hypervisor-and-its-types__",level:3},{value:"<em>b) Comparing hypervisor types</em>",id:"b-comparing-hypervisor-types",level:3},{value:"<em>Types of virtualization</em>",id:"types-of-virtualization",level:2},{value:"<strong>Containerization</strong>",id:"containerization",level:2},{value:"<em>What is containerization</em>",id:"what-is-containerization",level:2},{value:"<em>What is a Docker</em>",id:"what-is-a-docker",level:2},{value:"<strong>Ppt diagram:</strong>",id:"ppt-diagram",level:3},{value:"What is the container environment?",id:"what-is-the-container-environment",level:3},{value:"<em>How to modify and build your own app</em>",id:"how-to-modify-and-build-your-own-app",level:2},{value:"<strong>Step 1: pull</strong>",id:"step-1-pull",level:3},{value:"<strong>Step 2: modify</strong>",id:"step-2-modify",level:3},{value:"<strong>Step 3: commit</strong>",id:"step-3-commit",level:3},{value:"<strong>Step 4: push</strong>",id:"step-4-push",level:3},{value:"<strong>Step 1: pull</strong>",id:"step-1-pull-1",level:3},{value:"<strong>Step 2: modify</strong>",id:"step-2-modify-1",level:3},{value:"<strong>Step 3: commit</strong>",id:"step-3-commit-1",level:3},{value:"<strong>Step 4: push</strong>",id:"step-4-push-1",level:3},{value:"<strong>Difference between Dockers and Virtual machines</strong>",id:"difference-between-dockers-and-virtual-machines",level:2},{value:"<em>Tabular differences on various parameters</em>",id:"tabular-differences-on-various-parameters",level:3},{value:"<em>When to use VM or a Docker</em>",id:"when-to-use-vm-or-a-docker",level:2},{value:"<em>Final thoughts</em>",id:"final-thoughts",level:4}],d={toc:c},m="wrapper";function h(e){var t=e.components,a=(0,r.Z)(e,o);return(0,i.kt)(m,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Virtualization")," comes in handy with the need of running ",(0,i.kt)("em",{parentName:"p"},"multiple simulated")," environments in a single machine without installing and configuring each instance. Virtualization has its used cases in many scenarios such as testing your app in multiple environments/devices."),(0,i.kt)("p",null,"Both Dockers and Virtual Machines(VMs) are capable of providing virtualized runtime environments for your software/hardware needs."),(0,i.kt)("p",null,"This article is aimed at providing a basic understanding of the common and unique features each Docker and a VM possess."),(0,i.kt)("p",null,"When you deal with multiple platforms with customized hardware/software specifications, you need to have an effective resource management in place. "),(0,i.kt)("h2",{id:"what-a-machine-needs"},"What a machine needs?"),(0,i.kt)("p",null,"Each computing environment(machine) needs its component of ",(0,i.kt)("em",{parentName:"p"},"hardware resources")," and ",(0,i.kt)("em",{parentName:"p"},"software resources.")),(0,i.kt)("p",null,"As more and more machines are needed, building up and administering many such stand-alone machines is not only cumbersome, time-consuming but also adds up to the cost and energy."),(0,i.kt)("p",null,"Apparently; to run a customized ",(0,i.kt)("em",{parentName:"p"},"High-power")," ",(0,i.kt)("em",{parentName:"p"},"Scalable")," ",(0,i.kt)("em",{parentName:"p"},"Server")," is a better idea to consolidate all the hardware and software requirements into one place and have a single server run and distribute the resources to many machines over a network."),(0,i.kt)("p",null,"That saves us time, resources, energy and revenue."),(0,i.kt)("p",null,"These gigantic servers are stored in a data warehouse called a ",(0,i.kt)("em",{parentName:"p"},"Datacenter__.")),(0,i.kt)("p",null,"Below Diagram (2) indicates a single ",(0,i.kt)("em",{parentName:"p"},"server")," serving and sharing resources and data among multiple client machines"),(0,i.kt)("p",null,"Does this look simplified enough? Yes of course!"),(0,i.kt)("p",null,"So, this setup looks feasible we have a high-power, high-storage Server that gives resources to many smaller(resources) machines over a network."),(0,i.kt)("h2",{id:"how-to-manage-huge-data---servers"},(0,i.kt)("strong",{parentName:"h2"},"How to manage huge data - Servers")),(0,i.kt)("p",null,"With ",(0,i.kt)("em",{parentName:"p"},"Internet Of Things")," in boom, Information is over-flowing with a huge amount of data; handling tremendous data needs more system resources which means more _Dedicated server_s are needed."),(0,i.kt)("h3",{id:"many-servers-approach-challenge"},(0,i.kt)("strong",{parentName:"h3"},"Many Servers approach challenge:")),(0,i.kt)("p",null,"Running several ",(0,i.kt)("em",{parentName:"p"},"Dedicated servers")," for specific services such as Web service, application or database service as indicated in Diagram (3) is difficult to administer and consumes more energy, resources, manpower and is highly expensive."),(0,i.kt)("p",null,"In addition; resource utilization of servers is very poor resulting in resource wastage."),(0,i.kt)("p",null,"This is where simulating different environments and running them all on a single server is a smart choice; rather than having to run multiple physically distinct servers."),(0,i.kt)("p",null,"This is how Diagram (3) would change after consolidating different servers into one as shown in Diagram (4)."),(0,i.kt)("p",null,"Sheet 2"),(0,i.kt)("h2",{id:"virtualization"},(0,i.kt)("strong",{parentName:"h2"},"Virtualization")),(0,i.kt)("h3",{id:"what-is-virtualization"},"What is Virtualization"),(0,i.kt)("p",null,"The above single server implementation can be defined as the following term."),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"Virtualization")," is a technique used to simulate and ",(0,i.kt)("em",{parentName:"p"},"pretend a single infrastructure")," resource (",(0,i.kt)("em",{parentName:"p"},"hardware resources")," and ",(0,i.kt)("em",{parentName:"p"},"software resources"),") ",(0,i.kt)("em",{parentName:"p"},"to be acting as many")," providing multiple functionalities or services without the need to physically build, install and configure."),(0,i.kt)("p",null,"In other words;"),(0,i.kt)("p",null,"Running ",(0,i.kt)("em",{parentName:"p"},"multiple simulated environments in a single machine without installing and configuring them")," is called ",(0,i.kt)("em",{parentName:"p"},"Virtualization"),"."),(0,i.kt)("p",null,"Technically speaking;"),(0,i.kt)("p",null,"Virtualization is an abstract layer that shares the infrastructure resources among various simulated ",(0,i.kt)("em",{parentName:"p"},"virtual machines")," without the need to physically set up these environments."),(0,i.kt)("p",null,"Diagram (5) displays different virtual Operating systems are running on the same machine and using the same hardware architecture of the underlying machine."),(0,i.kt)("h3",{id:"what-is-a-virtual-machine"},(0,i.kt)("em",{parentName:"h3"},"What is a Virtual machine")),(0,i.kt)("p",null,"The simulated virtualized environments are called virtual machines or VM."),(0,i.kt)("p",null,"Virtual machine is a ",(0,i.kt)("em",{parentName:"p"},"replication/simulation")," of an actual physical machine."),(0,i.kt)("p",null,"A VM acts like a real physical machine and uses the physical resources of the underlying host OS."),(0,i.kt)("p",null,"A VM is a running ",(0,i.kt)("em",{parentName:"p"},"instance of a real physical machine.")),(0,i.kt)("h3",{id:"need-for-virtualization"},(0,i.kt)("em",{parentName:"h3"},"Need")," ",(0,i.kt)("em",{parentName:"h3"},"for")," ",(0,i.kt)("em",{parentName:"h3"},"virtualization")),(0,i.kt)("p",null,"So; we have an overview of virtualization, let us examine when should we virtualize and what are the benefits of virtualization?"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"Better resource management and")," ",(0,i.kt)("strong",{parentName:"li"},"cost-effective"),": as indicated in Diagram (6) and Diagram (7); hardware resources are distributed wisely on need basis to different environments; all the virtual machines share the same resources and reduce resource wastage."),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"Ease of quick administration and maintenance"),": It is easier to build, install, configure one server rather than multiple servers. Updating a patch on various machines from a single virtualized server is much more feasible."),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"Disaster recovery"),": Since all the virtualized machines reside on the same server and are treated as mounted volumes of data files, it is easier to back up these machines. In case of a disaster failure (power failure, network down, cyber-attacks, failed test code, etc) VM screenshots are used to recover the running state of the machine and the whole setup can be built up within minutes."),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"Isolated and independent secure test environment"),": virtualization provide an isolated independent virtual test environment to test the legacy code or a vendor-specific product or even a beta release or say a corrupt code without affecting the main hardware and software platform. (This is a contradictory statement though; will discuss more under types of virtualization)",(0,i.kt)("br",{parentName:"li"}),"These test environments like dev, uat, preprod, prod etc..can be easily tested and discarded."),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"Easily scalable and upgradable"),": Building up more simulated environments means spinning up more virtual machines. Also upgrading VMs is as good as to run a patch in all VMs."),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"Portable"),": Virtual machines are lightweight compared to the actual running physical machines; in addition, a VM that includes its own OS, drivers, and other installation files is portable on any machine. One can access the data virtually from any location.")),(0,i.kt)("p",null,"The screenshot of activity monitor below compares the CPU load:"),(0,i.kt)("h2",{id:"implementation"},(0,i.kt)("em",{parentName:"h2"},"Implementation")),(0,i.kt)("h3",{id:"a-what-is-hypervisor-and-its-types__"},(0,i.kt)("em",{parentName:"h3"},"a) What is hypervisor and its types__?")),(0,i.kt)("p",null,"As discussed in the previous section; virtualization is achieved by means of a virtualized layer on top of hardware or a software resource."),(0,i.kt)("p",null,"This abstract layer is called a ",(0,i.kt)("em",{parentName:"p"},"hypervisor.")),(0,i.kt)("p",null,"A hypervisor is a virtual machine monitor (VMM)"),(0,i.kt)("p",null,"There are 2 types of hypervisors: Diagram (8)"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Type-1 or bare-metal hypervisor"),(0,i.kt)("li",{parentName:"ol"},"Type-2 or hosted hypervisor")),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"Type-1 or bare-metal")," hypervisor is installed directly on the system hardware, thus abstracting and sharing the hardware components with the VMs."),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"Type-2 or hosted hypervisor")," is installed on top of the system bootable OS called host OS; this hypervisor abstracts the system resources visible to the host OS and distributes it among the VMs."),(0,i.kt)("p",null,"Both have their own role to play in virtualization."),(0,i.kt)("h3",{id:"b-comparing-hypervisor-types"},(0,i.kt)("em",{parentName:"h3"},"b) Comparing hypervisor types")),(0,i.kt)("p",null,"Type-1 or bare-metal hypervisor"),(0,i.kt)("p",null,"Type-2 or hosted hypervisor"),(0,i.kt)("p",null,"Installed ",(0,i.kt)("em",{parentName:"p"},"directly on the infrastructure"),"-","OS independent and more secure against software issues."),(0,i.kt)("p",null,"Installed ",(0,i.kt)("em",{parentName:"p"},"on top of the host OS"),"-","more prone to software failures."),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"Better resource flexibility"),": Have direct access to the hardware infrastructure (Hard-drive partition, RAM, embedded cards such as NIC). Provide more flexibility and scalability to the VMs and assign resources on a need basis."),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"Limited resource allocation"),": Have access to just the resources exposed by the host OS."),(0,i.kt)("p",null,"VMs installed will have limited access to hardware resources allocated and exposed by the host OS."),(0,i.kt)("p",null,"Single point of failure: A compromised VM may affect the kernel. Extra security layers needed."),(0,i.kt)("p",null,"A compromised VM may affect only the host OS, kernel still remains unreachable."),(0,i.kt)("p",null,"Low latency due to direct link to the infrastructure."),(0,i.kt)("p",null,"High latency as all the VMs have to pass through the OS layer to access the system resources."),(0,i.kt)("p",null,"Generally used in Servers"),(0,i.kt)("p",null,"Generally used on small client machines"),(0,i.kt)("p",null,"Expensive"),(0,i.kt)("p",null,"Less expensive"),(0,i.kt)("p",null,"Type-1 Hypervisors in market:"),(0,i.kt)("p",null,"VMWare ESX/ESXi"),(0,i.kt)("p",null,"Hyperkit (OSX)"),(0,i.kt)("p",null,"Microsoft Hyper-V (Windows)",(0,i.kt)("br",{parentName:"p"}),"\n","KVM(Linux)"),(0,i.kt)("p",null,"Oracle VM Server"),(0,i.kt)("p",null,"Type-2 Hypervisors in market:"),(0,i.kt)("p",null,"Oracle VM VirtualBox"),(0,i.kt)("p",null,"VMWare Workstation"),(0,i.kt)("p",null,"Parallels desktop for MAC"),(0,i.kt)("h2",{id:"types-of-virtualization"},(0,i.kt)("em",{parentName:"h2"},"Types of virtualization")),(0,i.kt)("p",null,"Based on what resource is virtualized, there are different classifications of virtualization."),(0,i.kt)("p",null,"Server, Storage device, operating system, network"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Desktop")," ",(0,i.kt)("strong",{parentName:"p"},"virtualization"),": Entire desktop environment is simulated and distributed to run on a single server all at once. A desktop virtualization allows administrators to manage, install, configure similar setups on many machines. Upgrading all the machines with a single patch update or security checks becomes easier and faster."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Server")," ",(0,i.kt)("strong",{parentName:"p"},"virtualization"),": Many dedicated servers can be virtualized into a single server that provides multi-server functionality."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example:")),(0,i.kt)("p",null,"Many virtual machines can be built up sharing the same underlying system resources."),(0,i.kt)("p",null,"Storage, RAM, disks, CPU"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Operating system")," ",(0,i.kt)("strong",{parentName:"p"},"virtualization"),": This happens at the kernel level Hypervisor on hardware type 2 bare-metal One machine: Can boot up as multiple OS like Windows or Linux side-by-side"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Application virtualization"),": Apps are packaged and stored in a virtual environment and are distributed across different VMs. Example Microsoft applications like excel, MS word, Powerpoint etc, Citrix applications."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Network functions virtualization"),": Physical network components such as NIC cards, switches, routers, servers, hubs, and cables are all assembled in a single server and used virtually by multiple machines without having the load of installing them on every machine."),(0,i.kt)("p",null,"Virtualization is one of the building blocks and driving force behind ",(0,i.kt)("a",{parentName:"p",href:"https://www.ibm.com/cloud/learn/cloud-computing"},(0,i.kt)("em",{parentName:"a"},"cloud computing")),"."),(0,i.kt)("p",null,"Cloud computing provide virtualized need-based services. This has given an uplift to the concept of virtualization."),(0,i.kt)("p",null,"A quick mention of various cloud computing models/services are listed below:"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"SaaS")," \u2013 Software as a Service\u2013 end-user applications are maintained and run by service providers and easily distributed and used by the end users without having to install them."),(0,i.kt)("p",null,"Top SaaS providers: Microsoft (Office suite, CRM, SQL server databases), AWS, Adobe, Oracle (ERP, CRM, SCM), Cisco\u2019s ",(0,i.kt)("a",{parentName:"p",href:"https://www.webex.com/de/index.html"},"Webex"),", ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/"},"GitHub")," ( git hosting web service)"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"PaaS")," \u2013 Platform as a Service \u2013 computing infrastructure(hardware/software) is maintained and updated by the service provider and the user just have to run the product over this platform."),(0,i.kt)("p",null,"Top Paas providers: ",(0,i.kt)("a",{parentName:"p",href:"https://aws.amazon.com/elasticbeanstalk/"},"AWS beanstalk"),", ",(0,i.kt)("a",{parentName:"p",href:"https://www.oracle.com/index.html"},"Oracle Cloud Platform (OCP)"),", ",(0,i.kt)("a",{parentName:"p",href:"https://cloud.google.com/appengine/"},"Google App Engine")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"IaaS")," \u2013 Infrastructure as a Service \u2013 Provide infrastructure such as servers, physical storage, networking, memory devices etc. Users can build their own platform with customized operating system and applications."),(0,i.kt)("p",null,"Key IaaS providers: Amazon Web Services, ",(0,i.kt)("a",{parentName:"p",href:"https://azure.microsoft.com/en-us/"},"Microsoft Azure"),", Google compute engine, Citrix"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Conclusion:")),(0,i.kt)("p",null,"We now have a fair understanding of types of virtualization and how they are implemented."),(0,i.kt)("h2",{id:"containerization"},(0,i.kt)("strong",{parentName:"h2"},"Containerization")),(0,i.kt)("p",null,"Though virtualization has its pros; there are certain downsides of virtualization such as:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Not all systems can be virtualized always."),(0,i.kt)("li",{parentName:"ul"},"A corrupt VM is sometimes contagious and may affect other VMs or the kernel in-case of a ",(0,i.kt)("em",{parentName:"li"},"Type-1 or bare-metal")," hypervisor."),(0,i.kt)("li",{parentName:"ul"},"Latency of virtual disks due to increased payload on the CPU resources with a higher number of VMs"),(0,i.kt)("li",{parentName:"ul"},"Unstable performance")),(0,i.kt)("p",null,"An alternative approach to overcome the above flaws of virtualization is to ",(0,i.kt)("em",{parentName:"p"},"Containerize")," the applications and the run-time environment together."),(0,i.kt)("h2",{id:"what-is-containerization"},(0,i.kt)("em",{parentName:"h2"},"What is containerization")),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"Containerization")," is an OS-level virtualization; wherein the entire build of an application along with run-time environment is encapsulated or bundled up in a package."),(0,i.kt)("p",null,"These packages are called ",(0,i.kt)("em",{parentName:"p"},"containers"),"."),(0,i.kt)("p",null,"Containers are lightweight virtualized environments. These are independent of the infrastructure both hardware and software."),(0,i.kt)("p",null,"The run-time environment includes the operating system, binaries, libraries, configuration files and other applications as shown in Diagram (9)."),(0,i.kt)("h2",{id:"what-is-a-docker"},(0,i.kt)("em",{parentName:"h2"},"What is a Docker")),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"Dockers")," provide an excellent framework for containerization and allow to build, ship, and run distributed applications over multiple platforms."),(0,i.kt)("p",null,"Docker framework is setup as a ",(0,i.kt)("em",{parentName:"p"},"docker engine")," installed on host OS and a ",(0,i.kt)("a",{parentName:"p",href:"https://www.knowledgehut.com/devops/docker-training"},"docker")," ",(0,i.kt)("em",{parentName:"p"},"daemon")," (background process) process is started that manage the virtual ",(0,i.kt)("em",{parentName:"p"},"containers"),"."),(0,i.kt)("p",null,"Refer Diagram (10) that shows a Docker engine with 3 containers residing on host OS (MAC OS)."),(0,i.kt)("p",null,"An instruction file called ",(0,i.kt)("em",{parentName:"p"},"dockerfile")," is written with a set of system commands that change the filesystem such as add, copy or delete commands, run commands, install utilities, system calls etc\u2026"),(0,i.kt)("p",null,"This ",(0,i.kt)("em",{parentName:"p"},"dockerfile")," is built and packaged along with its run-time environment as an executable file called a ",(0,i.kt)("em",{parentName:"p"},"docker image.")),(0,i.kt)("p",null,"Docker daemon services run these images to create ",(0,i.kt)("em",{parentName:"p"},"docker containers.")),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},(0,i.kt)("em",{parentName:"p"},"Docker container is a run-time instance of an image"))),(0,i.kt)("p",null,"It is wise to say that many images (or layers of instruction files) make up a container."),(0,i.kt)("p",null,"Docker containers have a compact packaging and each container is well isolated."),(0,i.kt)("p",null,"We can run, start, stop, attach, move or delete containers as these runs as services on the host OS."),(0,i.kt)("p",null,"Each image is made up of different layers; each image based on top of the other with the customized command changes that we make."),(0,i.kt)("p",null,"Every time we make a change in the filesystem, each change related to the image is encapsulated in a new layer of filesystem and stacked up above the parent image."),(0,i.kt)("p",null,"Only the changed layers are rebuilt, rest of the unchanged image layers are reused."),(0,i.kt)("p",null,"Certain docker commands ADD, RUN and COPY c",(0,i.kt)("em",{parentName:"p"},"reate a new layer with increased byte size; rest of the commands simply adds up a new layer with zero-byte size.")),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"These layers are re-used to build a new image, hence faster and lightweight.")),(0,i.kt)("p",null,"Docker images are also"),(0,i.kt)("p",null,"The layer approach of an image every time there is a change in the image makes it possible to Version control the docker images."),(0,i.kt)("p",null,"Here is a terminal recording that shows docker engine process and how images and containers are created."),(0,i.kt)("p",null,"Docker documentation - to ",(0,i.kt)("a",{parentName:"p",href:"https://docs.docker.com/get-started/part2/"},"create containers"),"."),(0,i.kt)("h3",{id:"ppt-diagram"},(0,i.kt)("strong",{parentName:"h3"},"Ppt diagram:")),(0,i.kt)("p",null,"Code -> package -> build images -> registry hub -> download/pull image -> run container"),(0,i.kt)("p",null,"Animation: sheet4"),(0,i.kt)("p",null,"Let\u2019s consider the docker container: divyabhushan/learn","_","docker hosted on docker hub."),(0,i.kt)("p",null,"Latest tagged image: centOS","_","release1.2"),(0,i.kt)("h3",{id:"what-is-the-container-environment"},"What is the container environment?"),(0,i.kt)("p",null,"Base OS: Centos:7"),(0,i.kt)("p",null,"Utilities: vim, yum, git"),(0,i.kt)("p",null,"Apps/files: Dockerfile, myApp.sh, runtests.sh, data and other supporting files."),(0,i.kt)("p",null,"Git source code: ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/divyabhushan/DockerImages_Ubuntu.git"},"dockerImages")),(0,i.kt)("p",null,"Download as: git clone ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/divyabhushan/DockerImages_Ubuntu.git"},"https://github.com/divyabhushan/DockerImages","_","Ubuntu.git")),(0,i.kt)("p",null,"What does the container do?",(0,i.kt)("br",{parentName:"p"}),"\n","Container launches \u201cmyApp.sh\u201d in Ubuntu:14.04 environment and run some scripts along with a set of post test","_","suites in the container (Ubuntu:14.04) and saves the output log file."),(0,i.kt)("h2",{id:"how-to-modify-and-build-your-own-app"},(0,i.kt)("em",{parentName:"h2"},"How to modify and build your own app")),(0,i.kt)("h3",{id:"step-1-pull"},(0,i.kt)("strong",{parentName:"h3"},"Step 1: pull")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"1.1: Pull the docker image")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"1.2: Run image to create a container and exit")),(0,i.kt)("h3",{id:"step-2-modify"},(0,i.kt)("strong",{parentName:"h3"},"Step 2: modify")),(0,i.kt)("p",null,"2.1: Start the container"),(0,i.kt)("p",null,"2.2: Attach to the container and make some changes"),(0,i.kt)("h3",{id:"step-3-commit"},(0,i.kt)("strong",{parentName:"h3"},"Step 3: commit")),(0,i.kt)("p",null,"3.1: Examine the history logs and changes in the container"),(0,i.kt)("p",null,"3.2: Commit the changes in container"),(0,i.kt)("h3",{id:"step-4-push"},(0,i.kt)("strong",{parentName:"h3"},"Step 4: push")),(0,i.kt)("p",null,"4.1: Push new image to docker hub"),(0,i.kt)("p",null,"Let us see the steps in action:"),(0,i.kt)("h3",{id:"step-1-pull-1"},(0,i.kt)("strong",{parentName:"h3"},"Step 1: pull")),(0,i.kt)("p",null,"docker image on your machine"),(0,i.kt)("p",null,"1.1: Pull the docker image"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Command:")),(0,i.kt)("p",null,"docker pull divyabhushan/learn","_","docker:myApp","_","ubuntu","_","14.04"),(0,i.kt)("p",null,"View the image on system"),(0,i.kt)("p",null,"docker images"),(0,i.kt)("p",null,"screenshot"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Command:")),(0,i.kt)("p",null,"docker run -it --name ubuntu14.04 0a6f949131a6"),(0,i.kt)("p",null,"Run command in ubuntu container and exit, the container is stopped on exiting out."),(0,i.kt)("p",null,"View the stopped container with the \u2018ps -a\u2019 command."),(0,i.kt)("h3",{id:"step-2-modify-1"},(0,i.kt)("strong",{parentName:"h3"},"Step 2: modify")),(0,i.kt)("p",null,"Start the container"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Command:")),(0,i.kt)("p",null,"docker start <container","_","id>"),(0,i.kt)("p",null,"Now the container is listed as a running process Attach to the container and make some changes"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Command:")),(0,i.kt)("p",null,"docker attach 7d0d0225778c"),(0,i.kt)("p",null,"edit the \u2018git configuration\u2019 file and \u2018myApp.sh\u2019 script"),(0,i.kt)("p",null,"Container is modified and stopped"),(0,i.kt)("h3",{id:"step-3-commit-1"},(0,i.kt)("strong",{parentName:"h3"},"Step 3: commit")),(0,i.kt)("p",null,"Examine the history logs and changes in the container"),(0,i.kt)("p",null,"The changes done inside the container filesystem can be viewed using the \u2018docker diff\u2019 command as:"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Command:")," "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"docker diff 7d0d0225778c\n")),(0,i.kt)("p",null,"Commit the changes in container"),(0,i.kt)("p",null,"Docker commit:"),(0,i.kt)("p",null,"Usage: docker commit ","[","OPTIONS","]"," CONTAINER ","[","REPOSITORY","[",":TAG","]","]"),(0,i.kt)("p",null,"docker commit -m 'new Ubuntu image' 7d0d0225778c divyabhushan/learn","_","docker:ubuntu14.04","_","v2"),(0,i.kt)("p",null,"New image is created and listed"),(0,i.kt)("h3",{id:"step-4-push-1"},(0,i.kt)("strong",{parentName:"h3"},"Step 4: push")),(0,i.kt)("p",null,"Push new image to docker hub"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Command:")),(0,i.kt)("p",null,"docker push divyabhushan/learn","_","docker:ubuntu14.04","_","v2"),(0,i.kt)("p",null,"Point to note: just the latest commit change layer \u201850a5ce553bba\u2019 has been pushed, while the other layers were re-used."),(0,i.kt)("p",null,"Image available on docker hub:"),(0,i.kt)("p",null,"The latest tagged image can now be pulled from other machines; and run to create the same container environment."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Conclusion"),": An image was pulled and run to create a container to replicate the environment. Container was modified, new changes were committed to form a new image. New Image pushed back on the docker hub and now available as a new tag ready to be pulled by other machines."),(0,i.kt)("h2",{id:"difference-between-dockers-and-virtual-machines"},(0,i.kt)("strong",{parentName:"h2"},"Difference between Dockers and Virtual machines")),(0,i.kt)("h3",{id:"tabular-differences-on-various-parameters"},(0,i.kt)("em",{parentName:"h3"},"Tabular differences on various parameters")),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Parameters"),(0,i.kt)("th",{parentName:"tr",align:null},"VMs"),(0,i.kt)("th",{parentName:"tr",align:null},"Dockers"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"architecture"),(0,i.kt)("td",{parentName:"tr",align:null},"Hardware-level virtualization. Each VM has its own copy of OS."),(0,i.kt)("td",{parentName:"tr",align:null},"Software level virtualization. Dockers have no own OS, run on host OS")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Isolation"),(0,i.kt)("td",{parentName:"tr",align:null},"Fully isolated"),(0,i.kt)("td",{parentName:"tr",align:null},"Process or application-level isolation.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Installation"),(0,i.kt)("td",{parentName:"tr",align:null},"Hypervisor can run directly on the hardware resources or on the host OS."),(0,i.kt)("td",{parentName:"tr",align:null},"Docker engine is installed on top of the host OS. A docker daemon process is initiated on the host OS. There is no separate OS for every container.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"CPU processing + performance"),(0,i.kt)("td",{parentName:"tr",align:null},"Slower: A VM contains the entire run-time environment that has to be loaded every time. Uses more CPU cycles; gives unstable performance."),(0,i.kt)("td",{parentName:"tr",align:null},"Faster: Docker images are pre-built and share host resources as a result running an image as a container is lightweight and consumes less CPU cycle; gives a stable performance")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Hardware storage"),(0,i.kt)("td",{parentName:"tr",align:null},"More storage space as each VM is an independent machine (OS). Example: 3 VMs of 800MB each will take 2.4 GB of space."),(0,i.kt)("td",{parentName:"tr",align:null},"Docker containers are lightweight since do not require to load OS+drivers, run on host OS as processes.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Portable"),(0,i.kt)("td",{parentName:"tr",align:null},"Dependency on host OS and hardware makes VM less portable. Importing a VM still requires manual setup such storage, RAM and network."),(0,i.kt)("td",{parentName:"tr",align:null},"Highly portable since lightweight and zero dependency on hardware.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Scalable and code-reusability"),(0,i.kt)("td",{parentName:"tr",align:null},"Spinning up more VMs still need administrative tasks such as distributing resources to VM. Running a new machine puts extra load on the system resources also re-managing earlier VMs becomes a task. Every VM keeps its own copy of resources-poor code-reusability."),(0,i.kt)("td",{parentName:"tr",align:null},"Spinning up new docker containers simply means running pre-built images into containers as a process inside host OS. Containers are also configured on-the-fly passing parameters and run-time. Single image can be run and used to create many containers; encourage code-reusability")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Resource utilization"),(0,i.kt)("td",{parentName:"tr",align:null},"Static allocation results in resource wastage in case of idle VMs or if a VM\u2019s resource requirement increases."),(0,i.kt)("td",{parentName:"tr",align:null},"Resources are dynamically allocated and de-allocated on the need basis by the docker engine.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Docker system prune or garbage collection"),(0,i.kt)("td",{parentName:"tr",align:null},"Virtual machines do not have an in-built prune mechanism, these have to be administered manually."),(0,i.kt)("td",{parentName:"tr",align:null},"Docker image and containers can be pruned; which frees up a sensible amount of storage and memory space and CPU cycles.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"New environment"),(0,i.kt)("td",{parentName:"tr",align:null},"Creating new VM from the scratch is a tedious, repetitive tasks. It involves installing a new OS, loading kernel drivers and other tools and configurations."),(0,i.kt)("td",{parentName:"tr",align:null},"Package the code and dependency files, build into an image, run the image to create a new container. Use an existing or a base image (dockerhub- scratch) to run and create more containers on the go.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Web-hosted Hub"),(0,i.kt)("td",{parentName:"tr",align:null},"No web hosted hub for VMs"),(0,i.kt)("td",{parentName:"tr",align:null},"dockerHub provides an open-source reliable trusted source of pre-built images that can be downloaded to run new containers.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Version control (backup, restore,track history)(refer git)"),(0,i.kt)("td",{parentName:"tr",align:null},"Snapshot of VMs are not very user-friendly and consume more space."),(0,i.kt)("td",{parentName:"tr",align:null},"Docker images are version controlled.\xa0Every delta difference in each docker container can easily be viewed (demo: docker diff ).\xa0Any change in the image is stored as a different layered version. A reference link to older images saves build time and space.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Auto-build"),(0,i.kt)("td",{parentName:"tr",align:null},"Automation of creating VMs is not very feasible."),(0,i.kt)("td",{parentName:"tr",align:null},"Docker images can also be auto-built from every source code check-in to GitHub (Automated builds on Dockerhub)")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Disaster recovery"),(0,i.kt)("td",{parentName:"tr",align:null},"Tedious to recover from VM backup files."),(0,i.kt)("td",{parentName:"tr",align:null},"Easier to restore docker images (like files) just like git source files in case images are version controlled. Backup images only have to be run to create containers. (refer: screenshot).")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Update"),(0,i.kt)("td",{parentName:"tr",align:null},"All the VMs have to updated with the release patch."),(0,i.kt)("td",{parentName:"tr",align:null},"A single image is updated, re-built and distributed across multiple platforms.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Memory usage+speed"),(0,i.kt)("td",{parentName:"tr",align:null},"Slower: Entire snapshot of a machine and the OS is loaded into the cache memory."),(0,i.kt)("td",{parentName:"tr",align:null},"Real-time and fast: pre-built images. Only the instance, i.e, a container has to be run as a process and uses memory like an executable")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Data integrity"),(0,i.kt)("td",{parentName:"tr",align:null},"VM behavior may change if the dependency includes beyond the VM boundaries. (example: an app depends on production host network settings)"),(0,i.kt)("td",{parentName:"tr",align:null},"Same behavior of apps in any environment")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"security"),(0,i.kt)("td",{parentName:"tr",align:null},"More secure: A failure inside a VM may reach its guest OS but not the host OS or other virtual machines. Type-2 hypervisor though has a risk of kernel attack."),(0,i.kt)("td",{parentName:"tr",align:null},"Less secure: If a docker container compromised; underlying OS and hence all the containers may be affected since they share the same host kernel. OS Kernel may also be risked.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Key providers"),(0,i.kt)("td",{parentName:"tr",align:null},"Red hat KVM, VMWare, Oracle VM VirtualBox, Mircrosoft Hyper-V, Citrix XenServer"),(0,i.kt)("td",{parentName:"tr",align:null},"Dockers,\xa0Google kubernetes Engine,\xa0AWS Elastic Container service")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Data authentication"),(0,i.kt)("td",{parentName:"tr",align:null},"Lot of software licenses."),(0,i.kt)("td",{parentName:"tr",align:null},"Docker maintains inbuilt content trust to verify published images.")))),(0,i.kt)("h2",{id:"when-to-use-vm-or-a-docker"},(0,i.kt)("em",{parentName:"h2"},"When to use VM or a Docker")),(0,i.kt)("p",null,"When the need is an isolated OS, go for VMs."),(0,i.kt)("p",null,"For a hardware and software independent isolated application that needs fast distribution on multiple environments, use dockers."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("h3",{parentName:"li",id:"docker-use-case"},"Docker use-case:"))),(0,i.kt)("p",null,"Example: A database application along with its database"),(0,i.kt)("p",null,"Consider the docker image - ",(0,i.kt)("a",{parentName:"p",href:"https://hub.docker.com/_/oracle-weblogic-server-12c?tab=description"},"Oracle WebLogic Server")," on ",(0,i.kt)("a",{parentName:"p",href:"https://hub.docker.com/"},"Docker Hub"),"."),(0,i.kt)("p",null,"This image is pre-built Oracle WebLogic Server runtime environment, including Oracle Linux 7 and Oracle JDK 8 for deploying Java EE applications."),(0,i.kt)("p",null,"To create Server configurations on any machine, just download this image and run to create and start a container."),(0,i.kt)("p",null,"There is no need to install and configure JDK, Linux or other run-time environment."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("h3",{parentName:"li",id:"do-not-use-docker-use-case"},"Do not use Docker use-case:"))),(0,i.kt)("p",null,"The application depends on utility outside the docker container."),(0,i.kt)("p",null,"Code developed on dev machine with base OS as MAC; needs certain firewall setting on say Ubuntu OS."),(0,i.kt)("p",null,"How can the code be tested on the production ubuntu OS firewall while running from MAC OS docker container?"),(0,i.kt)("p",null,"Solution:  Install a virtualization software on host OS-MAC; Create a VM (Virtual machine) with host OS as Ubuntu (same as production environment)."),(0,i.kt)("p",null,"Configure the desired firewall settings on host VM \u2013 Ubuntu; import the test code inside Ubuntu and test."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("h3",{parentName:"li",id:"use-a-vm"},"Use a VM:"))),(0,i.kt)("p",null,"For Embedded systems programming, a VM is installed that connects to the system device drivers, controllers and kernel."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("h3",{parentName:"li",id:"virtualization-used-along-with-docker"},"Virtualization used along with docker:"))),(0,i.kt)("p",null,"An extension to the previous scenario would be if you would want to also test your python application in the host OS-Ubuntu VM without having to set up the python exe and its libraries and binaries."),(0,i.kt)("p",null,"All you have to do is: Install ",(0,i.kt)("a",{parentName:"p",href:"https://www.knowledgehut.com/devops/docker-training"},"Docker")," engine for Ubuntu OS and pull the python image from Docker hub as:"),(0,i.kt)("p",null,"docker pull python:tag ","["," tag is the python version-choose the appropriate version ","]"),(0,i.kt)("p",null,"docker pull python:2.7"),(0,i.kt)("p",null,"Refer: ",(0,i.kt)("a",{parentName:"p",href:"https://hub.docker.com/_/python/"},"Python image")),(0,i.kt)("p",null,"Either write a Dockerfile to import/copy entire source code to python environment or directly run the image passing the script path as below:"),(0,i.kt)("p",null,"Command:"),(0,i.kt)("p",null,"$docker run -it --name my-python-script -v \u201c$PWD\u201d:/usr/src/myapp -w /usr/src/myapp python:2.7 python my-application.py"),(0,i.kt)("p",null,"Command options:"),(0,i.kt)("p",null,"-","v = volume list-bind mount a volume ","[","mount present working directory onto /usr/src/myapp inside container","]"),(0,i.kt)("p",null,"-","w = workdir string-working directory inside the container"),(0,i.kt)("p",null,"Moreover; you can also test your python code in more than one version by downloading different python images, running them to create different containers and running your app in each container."),(0,i.kt)("p",null,"What\u2019s exciting here is that once the code tested in each python environment; you could quickly work on the test results and drop the containers. And deploy the code to production only once code tested against various python versions."),(0,i.kt)("h4",{id:"final-thoughts"},(0,i.kt)("em",{parentName:"h4"},"Final thoughts")),(0,i.kt)("p",null,"VMs and dockers are compatible with each other. Dockers are not here to replace Virtual machines."),(0,i.kt)("p",null,"Both serve the same purpose of virtualizing the computing and infrastructure resources for optimized utilization."),(0,i.kt)("p",null,"Using both Virtual machines and dockers together can yield better results in virtualization."),(0,i.kt)("p",null,"When one desires a fast, lightweight, portable and highly scalable hardware-independent environment for multiple applications isolation; wherein security is not the major concern; Dockers is the best choice."),(0,i.kt)("p",null,"Use a VM for embedded systems that are integrated with hardware; such as device driver or kernel coding."),(0,i.kt)("p",null,"A scenario simulating an infrastructure setup with a high resource control and dependency on system resources; VMs are a better choice."),(0,i.kt)("p",null,"Use of Dockers inside VM"),(0,i.kt)("p",null,"CI/CD pipelines scenario:"),(0,i.kt)("p",null,"Virtualization enables a smooth CI/CD process flow by promoting the users to concentrate only on developing the code on a working system that is set up for automated continuous integration and deployment without having to duplicate the entire setup each time."),(0,i.kt)("p",null,"A virtualized environment is set up; either using a VM or a docker image that takes care of the automatic code check-ins, builds, regression testing, and deployments on the server."),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"Originally posted on ",(0,i.kt)("a",{parentName:"p",href:"https://www.knowledgehut.com/blog/devops/docker-vs-vm"},"KnowledgeHut"))))}h.isMDXComponent=!0}}]);