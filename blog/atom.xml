<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://divyabhushan.github.io/blog</id>
    <title>Divya Bhushan Blog</title>
    <updated>2019-06-10T00:00:00.000Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://divyabhushan.github.io/blog"/>
    <subtitle>Divya Bhushan Blog</subtitle>
    <icon>https://divyabhushan.github.io/img/favicon.ico</icon>
    <entry>
        <title type="html"><![CDATA[DevOps Interview Questions and Answers - Part I - Basics]]></title>
        <id>https://divyabhushan.github.io/blog/2019/06/10/devops-interview-questions-answers</id>
        <link href="https://divyabhushan.github.io/blog/2019/06/10/devops-interview-questions-answers"/>
        <updated>2019-06-10T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[DevOps is a set of practices that combines software development and IT operations. Here is a list of the top interview questions asked to bag a role in DevOps field.]]></summary>
        <content type="html"><![CDATA[<p>DevOps is a set of practices that combines software development and IT operations. Here is a list of the top interview questions asked to bag a role in DevOps field.</p><ol><li><a href="#1-what-is-devops">What is Devops?</a></li><li><a href="#2-what-are-some-of-the-tools-you-have-used-in-devops-approach">What are the tools you have used in devops?</a></li><li><a href="#3-what-is-git">What is Git?</a></li><li><a href="#4-what-is-a-git-commit-object-how-is-it-read">What is a git commit object? How is it read?</a></li><li><a href="#5-what-is-the-difference-between-a-git-reset-and-a-git-revert">What is the difference between a <code>git reset</code> and <code>git revert</code></a></li><li><a href="#6-how-does-git-rebase-work-when-should-you-rebase-your-work-instead-of-a-git-merge"></a></li></ol><h2 class="anchor anchorWithStickyNavbar_LWe7" id="1-what-is-devops">1. What is DevOps?<a href="#1-what-is-devops" class="hash-link" aria-label="Direct link to 1. What is DevOps?" title="Direct link to 1. What is DevOps?">​</a></h2><p>DevOps is an approach to collaborate the development and operations teams for a better, bug-free continuous delivery and integration of the source code.<br>
<!-- -->DevOps is about automating the entire SDLC(Software Development Life Cycle) process with the implementation of CI/CD practices.
CI/CD are the Continuous integration and continuous deployment methodologies.<br>
<!-- -->Every source code check-in will automatically build and unit test the entire code against a<br>
<!-- -->production like environment and continuously deployed to production environment after it passes its automated tests.<br>
<!-- -->That eliminates the long feedback, bug-fix, and product enhancements loops between every<br>
<!-- -->Release.
Every team takes the accountability of the entire product right from the requirement analysis to documentation to coding, testing in development environments, code deployment and continuous improvements in terms of bugs and feedback from reviewers and the customers.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="2-what-are-some-of-the-tools-you-have-used-in-devops-approach">2. What are some of the tools you have used in DevOps approach?]<a href="#2-what-are-some-of-the-tools-you-have-used-in-devops-approach" class="hash-link" aria-label="Direct link to 2. What are some of the tools you have used in DevOps approach?]" title="Direct link to 2. What are some of the tools you have used in DevOps approach?]">​</a></h2><p>Considering DevOps to be an ideology towards achieving a quality product, every organization has its own guidelines and approach towards it.<br>
<!-- -->Some of the popular tools I have used are:</p><ul><li>Git as a Distributed VCS to manage the source code.</li><li>Jenkins to achieve CI/CD (Continuous Integration and Continuous Delivery) +plugins</li><li>Puppet for Configuration Management and Deployment tool</li><li>Nagios for Continuous Monitoring; and</li><li>Docker for containerization.</li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="3-what-is-git">3. What is Git?<a href="#3-what-is-git" class="hash-link" aria-label="Direct link to 3. What is Git?" title="Direct link to 3. What is Git?">​</a></h2><p>Git is a Distributed Version Control System; used to logically store and backup the entire history of how your project source code has developed, keeping a track of every version change of the code.</p><p>Git facilitates very flexible and efficient branching and merging of your code with other collaborators.Being distributed git is extremely fast and more reliable as every developer has his own local copy of the entire repository.</p><p>Git allows you to undo the mistakes in the source code at different tiers of its architecture namely- Working directory, Staging (Index) area, Local repository, and Remote repository.</p><p>Using Git we can always get an older version of our source code and work on it.Git tracks every bit of data as it checksums every file into unique hash codes referring to them via pointers.</p><p>To summarize Git is the most efficient and widely used VCS, used by major companies like Linux, Google, Facebook, Microsoft, Twitter, LinkedIn, Netflix, Android, Amazon, IBM, Apple IOS to name a few…</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="4-what-is-a-git-commit-object-how-is-it-read">4. What is a git commit object? How is it read?<a href="#4-what-is-a-git-commit-object-how-is-it-read" class="hash-link" aria-label="Direct link to 4. What is a git commit object? How is it read?" title="Direct link to 4. What is a git commit object? How is it read?">​</a></h2><p>When a project repository is initialized to be a git repository, git stores all its metadata in a hidden folder “.git” under the project root directory.<br>
<!-- -->Git repository is a collection of <em>objects.</em> </p><p>Git has 4 types of objects – blobs, trees, tags, and commits.</p><p>Every commit creates a new <em>commit object</em> with a unique SHA-1 hash_id.<br>
<!-- -->Each commit object has a pointer reference to the tree object, its parent object, author, committer and the commit message.<br>
<img loading="lazy" src="https://d2o2utebsixu4k.cloudfront.net/media/images/1552023479018-DevOps--set2-.jpg" alt="DevOps" class="img_ev3q"></p><p>Diagram: Single Commit object</p><p>To see the commit log message along with the textual diff of the code, run:  </p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token function" style="color:rgb(130, 170, 255)">git</span><span class="token plain"> show </span><span class="token operator" style="color:rgb(137, 221, 255)">&lt;</span><span class="token plain">commit_id</span><span class="token operator" style="color:rgb(137, 221, 255)">&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">Divya1@Divya:initialRepo </span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token plain">master</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token plain"> </span><span class="token variable" style="color:rgb(191, 199, 213)">$git</span><span class="token plain"> show f9354cb</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">commit f9354cb08d91e80cabafd5b54d466b6055eb2927</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">Author: divya bhushan </span><span class="token operator" style="color:rgb(137, 221, 255)">&lt;</span><span class="token plain">divya_bhushan@hotmail.com</span><span class="token operator" style="color:rgb(137, 221, 255)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">Date:   Mon Feb </span><span class="token number" style="color:rgb(247, 140, 108)">11</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">23</span><span class="token plain">:39:24 </span><span class="token number" style="color:rgb(247, 140, 108)">2019</span><span class="token plain"> +0100</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    Add database logs.</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token function" style="color:rgb(130, 170, 255)">diff</span><span class="token plain"> --git a/logs/db.log b/logs/db.log</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">new </span><span class="token function" style="color:rgb(130, 170, 255)">file</span><span class="token plain"> mode </span><span class="token number" style="color:rgb(247, 140, 108)">100644</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">index 0000000</span><span class="token punctuation" style="color:rgb(199, 146, 234)">..</span><span class="token plain">f8854b0</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">--- /dev/null</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">+++ b/logs/db.log</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">@@ -0,0 +1 @@</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">+database logs</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>To read a commit object git has 'git cat-file’ utility.  </p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">Divya1@Divya:initialRepo </span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token plain">master</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token plain"> </span><span class="token variable" style="color:rgb(191, 199, 213)">$git</span><span class="token plain"> cat-file -p f9354cb</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">tree 2a85825b8d20918350cc316513edd9cc289f8349</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">parent 30760c59d661e129329acfba7e20c899d0d7d199</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">author divya bhushan </span><span class="token operator" style="color:rgb(137, 221, 255)">&lt;</span><span class="token plain">divya_bhushan@hotmail.com</span><span class="token operator" style="color:rgb(137, 221, 255)">&gt;</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">1549924764</span><span class="token plain"> +0100</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">committer divya bhushan </span><span class="token operator" style="color:rgb(137, 221, 255)">&lt;</span><span class="token plain">divya_bhushan@hotmail.com</span><span class="token operator" style="color:rgb(137, 221, 255)">&gt;</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">1549924764</span><span class="token plain"> +0100 </span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">Add database logs.</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>A tree object is like an OS directory that stores references to other directories and files (blob type).  </p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">Divya1@Divya:initialRepo </span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token plain">master</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token plain"> </span><span class="token variable" style="color:rgb(191, 199, 213)">$git</span><span class="token plain"> cat-file -p 2a85825b8d20918350cc316513edd9cc289f8349</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token number" style="color:rgb(247, 140, 108)">100755</span><span class="token plain"> blob 054acd444517ad5a0c1e46d8eff925e061edf46c README.md</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">040000 tree dfe42cbaf87e6a56b51dab97fc51ecedfc969f39 code</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token number" style="color:rgb(247, 140, 108)">100644</span><span class="token plain"> blob e08d4579f39808f3e2830b5da8ac155f87c0621c dockerfile</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">040000 tree 014e65a65532dc16a6d50e0d153c222a12df4742   logs</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="5-what-is-the-difference-between-a-git-reset-and-a-git-revert">5. What is the difference between a git reset and a git revert.<a href="#5-what-is-the-difference-between-a-git-reset-and-a-git-revert" class="hash-link" aria-label="Direct link to 5. What is the difference between a git reset and a git revert." title="Direct link to 5. What is the difference between a git reset and a git revert.">​</a></h2><ul><li>git revert is used to record some new commits to reverse the effect of some earlier commits/snapshot of a project.</li><li>Instead of removing the commit from the project history, it figures out how to undo the changes introduced by the commit &amp; appends a new commit with the resulting content in the current branch.</li></ul><p><img loading="lazy" src="https://d2o2utebsixu4k.cloudfront.net/media/images/1552024197659-What-is-the-difference-between-a-git-reset-and-a-git-revert.jpg" alt="difference-between-a-git-reset-and-a-git" class="img_ev3q"></p><ul><li><strong>Usage:</strong> git revert &lt;commit_id&gt;</li><li><strong>Use:</strong> To undo an entire commit from your project history; removing a bug introduced by a commit.</li></ul><p><strong>Reset Vs Revert</strong></p><ul><li>git “reset”: resets the project to a previous snapshot erasing the changes.</li><li>git “revert” does not change the project history unlike git “reset”</li><li>Git “revert” undoes the commit id changes and applies the undo work as a new commit id object.</li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="6-how-does-git-rebase-work-when-should-you-rebase-your-work-instead-of-a-git-merge">6. How does 'git rebase’ work? When should you rebase your work instead of a 'git merge’?<a href="#6-how-does-git-rebase-work-when-should-you-rebase-your-work-instead-of-a-git-merge" class="hash-link" aria-label="Direct link to 6. How does 'git rebase’ work? When should you rebase your work instead of a 'git merge’?" title="Direct link to 6. How does 'git rebase’ work? When should you rebase your work instead of a 'git merge’?">​</a></h2><p>There are scenarios wherein one would like to merge a quickfix or feature branch with not a huge commit history into another 'dev’ or 'uat’ branch and yet maintain a linear history.</p><p>A non-fast forward 'git merge’ would result in a diverged history. Also when one wants the feature merged commits to be the latest commits; 'git rebase’ is an appropriate way of merging the two branches.</p><p>'git rebase’ replays the commits on the current branch and place them over the tip of the rebased branch.Since it replays the commit ids, rebase rewrites commit objects and create a new object id(SHA-1). Word of caution: Do not use it if the history is on release/production branch and being shared on the central server. Limit the rebase on your local repository only to rebase quickfix or feature branches.</p><p><strong>Steps:</strong></p><p>Say there is a 'dev’ branch that needs a quick feature to be added along with the test cases from 'uat’ branch.</p><ul><li><strong>Step 1:</strong> Branch out 'new-feature’ branch from 'dev’.</li></ul><p>Develop the new feature and make commits in 'new-feature’ branch.</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token plain">dev </span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token plain"> </span><span class="token variable" style="color:rgb(191, 199, 213)">$git</span><span class="token plain"> checkout -b new-feature</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token plain">new-feature </span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token plain"> $ </span><span class="token function" style="color:rgb(130, 170, 255)">git</span><span class="token plain"> </span><span class="token function" style="color:rgb(130, 170, 255)">add</span><span class="token plain"> lib/commonLibrary.sh </span><span class="token operator" style="color:rgb(137, 221, 255)">&amp;&amp;</span><span class="token plain"> </span><span class="token function" style="color:rgb(130, 170, 255)">git</span><span class="token plain"> commit -m “Add commonLibrary file”</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">Divya1@Divya:rebase_project </span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token plain">new-feature</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token plain"> </span><span class="token variable" style="color:rgb(191, 199, 213)">$git</span><span class="token plain"> </span><span class="token function" style="color:rgb(130, 170, 255)">add</span><span class="token plain"> lib/commonLibrary.sh </span><span class="token operator" style="color:rgb(137, 221, 255)">&amp;&amp;</span><span class="token plain"> </span><span class="token function" style="color:rgb(130, 170, 255)">git</span><span class="token plain"> commit -m </span><span class="token string" style="color:rgb(195, 232, 141)">'Add commonLibrary file'</span><span class="token plain">Divya1@Divya:rebase_project </span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token plain">new-feature</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token plain"> </span><span class="token variable" style="color:rgb(191, 199, 213)">$git</span><span class="token plain"> </span><span class="token function" style="color:rgb(130, 170, 255)">add</span><span class="token plain"> feature1.txt </span><span class="token operator" style="color:rgb(137, 221, 255)">&amp;&amp;</span><span class="token plain"> </span><span class="token function" style="color:rgb(130, 170, 255)">git</span><span class="token plain"> commit -m </span><span class="token string" style="color:rgb(195, 232, 141)">'Add feature1.txt'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">Divya1@Divya:rebase_project </span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token plain">new-feature</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token plain"> </span><span class="token variable" style="color:rgb(191, 199, 213)">$git</span><span class="token plain"> </span><span class="token function" style="color:rgb(130, 170, 255)">add</span><span class="token plain"> feature2.txt </span><span class="token operator" style="color:rgb(137, 221, 255)">&amp;&amp;</span><span class="token plain"> </span><span class="token function" style="color:rgb(130, 170, 255)">git</span><span class="token plain"> commit -m </span><span class="token string" style="color:rgb(195, 232, 141)">'Add feature2.txt'</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><ul><li><strong>Step 2:</strong> Merge 'uat’ branch into 'dev’</li></ul><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token plain">dev</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token plain"> $ </span><span class="token function" style="color:rgb(130, 170, 255)">git</span><span class="token plain"> merge uat</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><ul><li><strong>Step 3:</strong> Rebase 'new-feature’ on 'dev’</li></ul><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">Divya1@Divya:rebase_project </span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token plain">dev</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token plain"> </span><span class="token variable" style="color:rgb(191, 199, 213)">$git</span><span class="token plain"> checkout new-featureDivya1@Divya:rebase_project </span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token plain">new-feature</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token plain"> </span><span class="token variable" style="color:rgb(191, 199, 213)">$git</span><span class="token plain"> rebase dev</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">First, rewinding </span><span class="token function" style="color:rgb(130, 170, 255)">head</span><span class="token plain"> to replay your work on </span><span class="token function" style="color:rgb(130, 170, 255)">top</span><span class="token plain"> of it</span><span class="token punctuation" style="color:rgb(199, 146, 234)">..</span><span class="token plain">.</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">Applying: Add commonLibrary </span><span class="token function" style="color:rgb(130, 170, 255)">file</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">Applying: Add feature1.txt</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">Applying: Add feature2.txt</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><ul><li><strong>Step 4:</strong> Switch to 'dev’ branch and merge 'new-feature’ branch, this is going to be a fast-forward merge as 'new-feature’ has already incorporated 'dev’+’uat’ commits.</li></ul><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">Divya1@Divya:rebase_project </span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token plain">new-feature</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token plain"> </span><span class="token variable" style="color:rgb(191, 199, 213)">$git</span><span class="token plain"> checkout dev</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">Divya1@Divya:rebase_project </span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token plain">dev</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token plain"> </span><span class="token variable" style="color:rgb(191, 199, 213)">$git</span><span class="token plain"> merge new-feature</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">Updating 5044e24</span><span class="token punctuation" style="color:rgb(199, 146, 234)">..</span><span class="token number" style="color:rgb(247, 140, 108)">3378815</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">Fast-forward</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">feature1.txt         </span><span class="token operator" style="color:rgb(137, 221, 255)">|</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">1</span><span class="token plain"> +</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">feature2.txt         </span><span class="token operator" style="color:rgb(137, 221, 255)">|</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">1</span><span class="token plain"> +</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">lib/commonLibrary.sh </span><span class="token operator" style="color:rgb(137, 221, 255)">|</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">16</span><span class="token plain"> ++++++++++++++++</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token number" style="color:rgb(247, 140, 108)">3</span><span class="token plain"> files changed, </span><span class="token number" style="color:rgb(247, 140, 108)">18</span><span class="token plain"> insertions</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">+</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">create mode </span><span class="token number" style="color:rgb(247, 140, 108)">100644</span><span class="token plain"> feature1.txt</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">create mode </span><span class="token number" style="color:rgb(247, 140, 108)">100644</span><span class="token plain"> feature2.txt</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">create mode </span><span class="token number" style="color:rgb(247, 140, 108)">100644</span><span class="token plain"> lib/commonLibrary.sh</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>this will result in linear history with 'new-feature’ results being at the top and 'dev’ commits being pushed later.</p><ul><li><strong>Step 5:</strong> View the history of 'dev’ after merging 'uat’ and 'new-feature’ (rebase)</li></ul><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">Divya1@Divya:rebase_project </span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token plain">dev</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token plain"> </span><span class="token variable" style="color:rgb(191, 199, 213)">$git</span><span class="token plain"> hist</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">* </span><span class="token number" style="color:rgb(247, 140, 108)">3378815</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">2019</span><span class="token plain">-02-14 </span><span class="token operator" style="color:rgb(137, 221, 255)">|</span><span class="token plain"> Add feature2.txt </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">HEAD -</span><span class="token operator" style="color:rgb(137, 221, 255)">&gt;</span><span class="token plain"> dev, new-feature</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token plain">divya bhushan</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">* d3859c5 </span><span class="token number" style="color:rgb(247, 140, 108)">2019</span><span class="token plain">-02-14 </span><span class="token operator" style="color:rgb(137, 221, 255)">|</span><span class="token plain"> Add feature1.txt </span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token plain">divya bhushan</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">* 93b76f7 </span><span class="token number" style="color:rgb(247, 140, 108)">2019</span><span class="token plain">-02-14 </span><span class="token operator" style="color:rgb(137, 221, 255)">|</span><span class="token plain"> Add commonLibrary </span><span class="token function" style="color:rgb(130, 170, 255)">file</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token plain">divya bhushan</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">*   5044e24 </span><span class="token number" style="color:rgb(247, 140, 108)">2019</span><span class="token plain">-02-14 </span><span class="token operator" style="color:rgb(137, 221, 255)">|</span><span class="token plain"> Merge branch </span><span class="token string" style="color:rgb(195, 232, 141)">'uat'</span><span class="token plain"> into dev </span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token plain">divya bhushan</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token operator" style="color:rgb(137, 221, 255)">|</span><span class="token plain">  </span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token operator" style="color:rgb(137, 221, 255)">|</span><span class="token plain"> * bb13fb0 </span><span class="token number" style="color:rgb(247, 140, 108)">2019</span><span class="token plain">-02-14 </span><span class="token operator" style="color:rgb(137, 221, 255)">|</span><span class="token plain"> End of uat work. </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">uat</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token plain">divya bhushan</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token operator" style="color:rgb(137, 221, 255)">|</span><span class="token plain"> * 0ab2061 </span><span class="token number" style="color:rgb(247, 140, 108)">2019</span><span class="token plain">-02-14 </span><span class="token operator" style="color:rgb(137, 221, 255)">|</span><span class="token plain"> Start of uat work. </span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token plain">divya bhushan</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">* </span><span class="token operator" style="color:rgb(137, 221, 255)">|</span><span class="token plain"> a96deb1 </span><span class="token number" style="color:rgb(247, 140, 108)">2019</span><span class="token plain">-02-14 </span><span class="token operator" style="color:rgb(137, 221, 255)">|</span><span class="token plain"> End of dev work. </span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token plain">divya bhushan</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">* </span><span class="token operator" style="color:rgb(137, 221, 255)">|</span><span class="token plain"> 817544e </span><span class="token number" style="color:rgb(247, 140, 108)">2019</span><span class="token plain">-02-14 </span><span class="token operator" style="color:rgb(137, 221, 255)">|</span><span class="token plain"> Start of dev work. </span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token plain">divya bhushan</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token operator" style="color:rgb(137, 221, 255)">|</span><span class="token plain">/  </span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">* 01ad76b </span><span class="token number" style="color:rgb(247, 140, 108)">2019</span><span class="token plain">-02-14 </span><span class="token operator" style="color:rgb(137, 221, 255)">|</span><span class="token plain"> Initial project structure. </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">tag: v1.0, master</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token plain">divya bhushan</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><div class="theme-admonition theme-admonition-note alert alert--secondary admonition_LlT9"><div class="admonitionHeading_tbUL"><span class="admonitionIcon_kALy"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"></path></svg></span>note</div><div class="admonitionContent_S0QG"><p>NOTE: 'dev’ will show a diverged commit history for 'uat’ merge and a linear history for 'new-feature’ merge.</p></div></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="7-what-is-a-docker-explain-its-role-in-devops">7. What is a Docker? Explain its role in DevOps.<a href="#7-what-is-a-docker-explain-its-role-in-devops" class="hash-link" aria-label="Direct link to 7. What is a Docker? Explain its role in DevOps." title="Direct link to 7. What is a Docker? Explain its role in DevOps.">​</a></h2><p>Every source code deployment needs to be portable and compatible on every device and environment.</p><p>Applications and their run time environment such as libraries and other dependencies like binaries, jar files, configuration files etc.. are bundled up(packaged) in a <strong>Container</strong>.</p><p><em>Containers</em> as a whole are portable, consistent and compatible with any environment.</p><p>In development words, a developer can run its application in any environment: dev, uat, preprod and production without worrying about the run-time dependencies of the application.</p><ul><li>Docker is a container platform.</li><li>Docker is a framework that provides an abstraction layer to manage containers.</li><li><em>Docker</em> is a containerization engine, which automates packaging, shipping, and deployment of any software applications or <em>Containers.</em></li><li>Docker also lets us test the code and then deploy it in production.</li><li>Docker along with Jenkins (a Continuous Integration tool) and Git plugin contributes in CI/CD process.</li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="8-what-is-a-docker-image-how-are-they-shared-and-accessed">8. What is a Docker image? How are they shared and accessed?<a href="#8-what-is-a-docker-image-how-are-they-shared-and-accessed" class="hash-link" aria-label="Direct link to 8. What is a Docker image? How are they shared and accessed?" title="Direct link to 8. What is a Docker image? How are they shared and accessed?">​</a></h2><p>A developer writes code instructions to define all the applications and its dependencies in a file called a “Dockerfile”.Dockerfile is used to create a 'Docker image' using the <code>docker build &lt;directory&gt;</code> command.The build command is run by the docker daemon.  </p><p>When you run a Docker image “Containers” are created. Containers are runtime instances of a Docker image.</p><ul><li>A Container can have many images.</li><li>Docker containers are stored in a docker registry on docker host.</li><li>Docker has a client-Server architecture.</li><li>Docker registry is generally pushed and shared on a Docker hub (Remote server).</li></ul><p><img loading="lazy" src="https://d2o2utebsixu4k.cloudfront.net/media/images/1552025560274-What-is-a-Docker-image-How-are-they-shared-and-accessed.jpg" alt="Docker-image-How-are-they-shared-and-accessed" class="img_ev3q"></p><p>Image credit: <a href="https://docs.docker.com/engine/docker-overview/" target="_blank" rel="noopener noreferrer">docs.docker.com</a></p><ul><li>Other developers 'Docker pull’ these registry images and create containers in their own environment.</li><li>Developers can run their applications in the same docker container as their peers.</li><li>This way you can get the same test environment on different servers with the same applications and dependencies.</li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="9-how-do-you-work-on-a-container-image">9. How do you work on a container image?<a href="#9-how-do-you-work-on-a-container-image" class="hash-link" aria-label="Direct link to 9. How do you work on a container image?" title="Direct link to 9. How do you work on a container image?">​</a></h2><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">--Get </span><span class="token function" style="color:rgb(130, 170, 255)">docker</span><span class="token plain"> images from </span><span class="token function" style="color:rgb(130, 170, 255)">docker</span><span class="token plain"> hub or your </span><span class="token function" style="color:rgb(130, 170, 255)">docker</span><span class="token plain"> repository</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token function" style="color:rgb(130, 170, 255)">docker</span><span class="token plain"> pull busybox</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token function" style="color:rgb(130, 170, 255)">docker</span><span class="token plain"> pull centos</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token function" style="color:rgb(130, 170, 255)">docker</span><span class="token plain"> pull divyabhushan/myrepo</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">Divya1@Divya:~ </span><span class="token variable" style="color:rgb(191, 199, 213)">$docker</span><span class="token plain"> pull divyabhushan/myrepo</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">Using default tag: latest</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">latest: Pulling from divyabhushan/myrepo</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">6cf436f81810: Pull complete</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">987088a85b96: Pull complete</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">b4624b3efe06: Pull complete</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">d42beb8ded59: Pull complete</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">d08b19d33455: Pull complete</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">80d9a1d33f81: Pull complete</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">Digest: sha256:c82b4b701af5301cc5d698d963eeed46739e67aff69fd1a5f4ef0aecc4bf7bbf</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">Status: Downloaded newer image </span><span class="token keyword" style="font-style:italic">for</span><span class="token plain"> divyabhushan/myrepo:latest</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">--List the </span><span class="token function" style="color:rgb(130, 170, 255)">docker</span><span class="token plain"> images</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">Divya1@Divya:~ </span><span class="token variable" style="color:rgb(191, 199, 213)">$docker</span><span class="token plain"> images</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">REPOSITORY            TAG IMAGE ID            CREATED SIZE</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">divyabhushan/myrepo   latest 72a21c221add        About an hour ago </span><span class="token number" style="color:rgb(247, 140, 108)">88</span><span class="token plain">.1MB</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">busybox               latest 3a093384ac30        </span><span class="token number" style="color:rgb(247, 140, 108)">5</span><span class="token plain"> weeks ago </span><span class="token number" style="color:rgb(247, 140, 108)">1</span><span class="token plain">.2MB</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">centos                latest 1e1148e4cc2c        </span><span class="token number" style="color:rgb(247, 140, 108)">2</span><span class="token plain"> months ago 202MB</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">--Create a </span><span class="token function" style="color:rgb(130, 170, 255)">docker</span><span class="token plain"> container by running the </span><span class="token function" style="color:rgb(130, 170, 255)">docker</span><span class="token plain"> image</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">--pass a shell argument  </span><span class="token builtin class-name" style="color:rgb(255, 203, 107)">:</span><span class="token plain"> </span><span class="token function" style="color:rgb(130, 170, 255)">uname</span><span class="token plain"> -a</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">Divya1@Divya:~ </span><span class="token variable" style="color:rgb(191, 199, 213)">$docker</span><span class="token plain"> run centos </span><span class="token function" style="color:rgb(130, 170, 255)">uname</span><span class="token plain"> -a</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">Linux c70fc2da749a </span><span class="token number" style="color:rgb(247, 140, 108)">4.9</span><span class="token plain">.125-linuxkit </span><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">#1 SMP Fri Sep 7 08:20:28 UTC 2018 x86_64 x86_64 x86_64 GNU/Linux</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>--Docker images can be built by reading a dockerfile<br>
<img loading="lazy" src="https://d2o2utebsixu4k.cloudfront.net/media/images/1552025878271-DevOps--set2--1.jpg" alt="dockerfile" class="img_ev3q"></p><p>--build a new image : 'newrepo’ with tag:1.0 from the dockerFiles/dockerfile</p><p>docker build -t newrepo:1.1 dockerFiles/</p><p><img loading="lazy" src="https://d2o2utebsixu4k.cloudfront.net/media/images/1552025892215-DevOps--set2--2.jpg" alt="dockerfile" class="img_ev3q"></p><p>-- Now create a container from the above image:</p><p><img loading="lazy" src="https://d2o2utebsixu4k.cloudfront.net/media/images/1552025914827-DevOps--set2--3.jpg" alt="dockerfile" class="img_ev3q"></p><p>-- List all the containers</p><p><img loading="lazy" src="https://d2o2utebsixu4k.cloudfront.net/media/images/1552025930794-DevOps--set2--4.jpg" alt="dockerfile" class="img_ev3q"></p><p>-- start the container</p><p><img loading="lazy" src="https://d2o2utebsixu4k.cloudfront.net/media/images/1552025951229-DevOps--set2--5.jpg" alt="dockerfile" class="img_ev3q"></p><p>--List only the running containers</p><p><img loading="lazy" src="https://d2o2utebsixu4k.cloudfront.net/media/images/1552025971609-DevOps--set2--6.jpg" alt="dockerfile" class="img_ev3q"></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="10-what-is-puppet-what-is-the-need-for-it">10. What is Puppet? What is the need for it?<a href="#10-what-is-puppet-what-is-the-need-for-it" class="hash-link" aria-label="Direct link to 10. What is Puppet? What is the need for it?" title="Direct link to 10. What is Puppet? What is the need for it?">​</a></h2><p>Puppet is a Configuration Management and deployment tool for administrative tasks.
This tool helps in automating the provisioning, configuration, and management of Infrastructure and Systems.</p><ul><li>Puppet helps administrators to automate the process of manually creating and configuring Virtual machines.</li><li>Say, you have to bring up 'n’ number of Servers with 'x’ number of VMs(Virtual machines) on them. Each VM needs to be configured for certain users, groups, services, applications, and databases etc.</li><li>The entire infrastructure can be loaded up with the help of Puppet programs re-using the codes on multiple servers.</li><li>Key feature: Idempotency</li><li>The same set of configurations can be run multiple times to build a machine on a server, as puppet would allow only unique configurations to be run.</li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="11-what-does-infrastructure-as-code-means-in-terms-of-puppet">11. What does 'Infrastructure as code’ means in terms of Puppet?<a href="#11-what-does-infrastructure-as-code-means-in-terms-of-puppet" class="hash-link" aria-label="Direct link to 11. What does 'Infrastructure as code’ means in terms of Puppet?" title="Direct link to 11. What does 'Infrastructure as code’ means in terms of Puppet?">​</a></h2><p>Entire Server Infrastructure setup configurations are written in terms of codes and re-used on all the Puppet Server agent’s nodes(machines) that are connected via a Puppet master Server.
This is achieved by the use of code snippets called 'manifests’; that are configuration files for every Server agent node.</p><ul><li>Each manifest (program files with *.pp extension) consists of the resources and the codes.</li><li>We can review, deploy and test the environment configuration for development, testing and production environments.</li><li>Puppet manifests written once are deployed on any environment to build up the same infrastructure.</li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="12-what-is-jenkins-used-for-in-devops">12. What is Jenkins used for in DevOps?<a href="#12-what-is-jenkins-used-for-in-devops" class="hash-link" aria-label="Direct link to 12. What is Jenkins used for in DevOps?" title="Direct link to 12. What is Jenkins used for in DevOps?">​</a></h2><p>Jenkins is a self-contained, open source automation server(tool) for continuous development.
Jenkins aids and automates CI/CD process.</p><p>It gets the checked in code from VCS like Git using a 'git plugin’, build the source code, run test cases in a production-like environment and make the code release ready using 'deploy’ plugin.</p><ul><li>These continuous <em>delivery pipeline_s are written in a '_Jenkinsfile’</em> which is also checked into project’s source code and version controlled by Git.</li><li>Pipelines are a continuous set of jobs that are run for continuous delivery and these jobs are integrated at every section of the workflow.</li><li>Jenkins pipelines easily connect to Docker images and containers to run inside.</li><li>Pipelines easily provide the desired test environment without having to configure the various system tools and dependencies.</li></ul><p>Sample Jenkins file</p><div class="language-json codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-json codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">pipeline </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">   agent </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"> docker </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"> image 'ubuntu</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain">latest' </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">   stages </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">       stage('build') </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">           steps </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">               sh 'uname -a'</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">           </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">       </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">   </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><ul><li>Jenkins will start the container- ubuntu with the latest image and execute the test case steps inside it.</li><li>agent directive says where and how to execute the pipeline</li><li>jenkinsfile (declarative pipeline)</li><li>pipeline</li><li>Jenkins saves us the trouble of debugging after a huge commit history if there was a code break.</li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="13-how-do-you-implement-cicd-using-jenkins">13. How do you implement CI/CD using Jenkins?<a href="#13-how-do-you-implement-cicd-using-jenkins" class="hash-link" aria-label="Direct link to 13. How do you implement CI/CD using Jenkins?" title="Direct link to 13. How do you implement CI/CD using Jenkins?">​</a></h2><ul><li>Continuous Integration using Jenkins and Git plugin</li><li>Create a new Jenkins item as a 'Pipeline’.</li><li>Add 'Git’ as branch source and give the Project repository url.</li><li>Every time source code is pushed to the remote git repository from the local git repo;</li><li>Jenkins job gets started(triggered).</li><li>Jenkins build the code and the output is available under “console output”</li><li>In the git repository add a 'jenkinsfile’ commit and push the code to git repository.</li><li>Add a Jenkinsfile in the git repository</li></ul><div class="language-json codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-json codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">pipeline </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">   agent </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"> docker </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"> image 'ubuntu</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain">latest' </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">   stages </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">       stage('build') </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">           steps </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">               sh 'uname -a'</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">           </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">       </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">stage('Test') </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">           steps </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">               sh './jenkins/scripts/test.sh'</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">           </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">       </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">   </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="14-mention-some-post-condition-pipelines-options-that-you-used-in-jenkinsfile">14. Mention some post condition pipelines options that you used in Jenkinsfile?<a href="#14-mention-some-post-condition-pipelines-options-that-you-used-in-jenkinsfile" class="hash-link" aria-label="Direct link to 14. Mention some post condition pipelines options that you used in Jenkinsfile?" title="Direct link to 14. Mention some post condition pipelines options that you used in Jenkinsfile?">​</a></h2><p>We can mention some test conditions to run post the completion of stages in a pipeline.</p><p>Code snippet</p><div class="language-json codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-json codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">post </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">always </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">echo “This block runs always !!!”</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">success </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">echo “This block runs when the stages has a success status”</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">unstable </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">echo “This block is run when the stages abort with an unstable status”</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Here are the post conditions reserved for jenkinsfile:</p><ul><li><strong>always:</strong></li></ul><p>Run the steps in the post section regardless of the completion status of the Pipeline’s or stage’s run.</p><ul><li><strong>unstable:</strong></li></ul><p>Only run the steps in post if the current Pipeline’s or stage’s run has an "unstable" status, usually caused by test failures, code violations, etc.</p><ul><li><strong>aborted:</strong></li></ul><p>Only run the steps in post if the current Pipeline’s or stage’s run has an “aborted” status.</p><ul><li><strong>success:</strong></li></ul><p>Only run the steps in post if the current Pipeline’s or stage’s run has a "success" status.</p><ul><li><strong>failure:</strong></li></ul><p>Only run the steps in post if the current Pipeline’s or stage’s run has a "failed" status.</p><ul><li><strong>changed:</strong></li></ul><p>Only run the steps in post if the current Pipeline’s or stage’s run has a different completion status from its previous run.</p><ul><li><strong>cleanup:</strong></li></ul><p>Run the steps in this post condition after every other post condition has been evaluated, regardless of the Pipeline or stage’s status.</p>]]></content>
        <author>
            <name>Divya Bhushan</name>
            <uri>https://github.com/divyabhushan</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Docker Vs Virtual Machines(VMs)]]></title>
        <id>https://divyabhushan.github.io/blog/2019/05/10/docker-vs-VMs</id>
        <link href="https://divyabhushan.github.io/blog/2019/05/10/docker-vs-VMs"/>
        <updated>2019-05-10T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Virtualization comes in handy with the need of running multiple simulated environments in a single machine without installing and configuring each instance. Virtualization has its used cases in many scenarios such as testing your app in multiple environments/devices.]]></summary>
        <content type="html"><![CDATA[<p><strong>Virtualization</strong> comes in handy with the need of running <em>multiple simulated</em> environments in a single machine without installing and configuring each instance. Virtualization has its used cases in many scenarios such as testing your app in multiple environments/devices.</p><p>Both Dockers and Virtual Machines(VMs) are capable of providing virtualized runtime environments for your software/hardware needs.</p><p>This article is aimed at providing a basic understanding of the common and unique features each Docker and a VM possess.</p><p>When you deal with multiple platforms with customized hardware/software specifications, you need to have an effective resource management in place. </p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="what-a-machine-needs">What a machine needs?<a href="#what-a-machine-needs" class="hash-link" aria-label="Direct link to What a machine needs?" title="Direct link to What a machine needs?">​</a></h2><p>Each computing environment(machine) needs its component of <em>hardware resources</em> and <em>software resources.</em></p><p>As more and more machines are needed, building up and administering many such stand-alone machines is not only cumbersome, time-consuming but also adds up to the cost and energy.</p><p>Apparently; to run a customized <em>High-power</em> <em>Scalable</em> <em>Server</em> is a better idea to consolidate all the hardware and software requirements into one place and have a single server run and distribute the resources to many machines over a network.</p><p>That saves us time, resources, energy and revenue.</p><p>These gigantic servers are stored in a data warehouse called a <em>Datacenter__.</em></p><p>Below Diagram (2) indicates a single <em>server</em> serving and sharing resources and data among multiple client machines</p><p>Does this look simplified enough? Yes of course!</p><p>So, this setup looks feasible we have a high-power, high-storage Server that gives resources to many smaller(resources) machines over a network.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="how-to-manage-huge-data---servers"><strong>How to manage huge data - Servers</strong><a href="#how-to-manage-huge-data---servers" class="hash-link" aria-label="Direct link to how-to-manage-huge-data---servers" title="Direct link to how-to-manage-huge-data---servers">​</a></h2><p>With <em>Internet Of Things</em> in boom, Information is over-flowing with a huge amount of data; handling tremendous data needs more system resources which means more _Dedicated server_s are needed.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="many-servers-approach-challenge"><strong>Many Servers approach challenge:</strong><a href="#many-servers-approach-challenge" class="hash-link" aria-label="Direct link to many-servers-approach-challenge" title="Direct link to many-servers-approach-challenge">​</a></h3><p>Running several <em>Dedicated servers</em> for specific services such as Web service, application or database service as indicated in Diagram (3) is difficult to administer and consumes more energy, resources, manpower and is highly expensive.</p><p>In addition; resource utilization of servers is very poor resulting in resource wastage.</p><p>This is where simulating different environments and running them all on a single server is a smart choice; rather than having to run multiple physically distinct servers.</p><p>This is how Diagram (3) would change after consolidating different servers into one as shown in Diagram (4).</p><p>Sheet 2</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="virtualization"><strong>Virtualization</strong><a href="#virtualization" class="hash-link" aria-label="Direct link to virtualization" title="Direct link to virtualization">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="what-is-virtualization">What is Virtualization<a href="#what-is-virtualization" class="hash-link" aria-label="Direct link to What is Virtualization" title="Direct link to What is Virtualization">​</a></h3><p>The above single server implementation can be defined as the following term.</p><p><em>Virtualization</em> is a technique used to simulate and <em>pretend a single infrastructure</em> resource (<em>hardware resources</em> and <em>software resources</em>) <em>to be acting as many</em> providing multiple functionalities or services without the need to physically build, install and configure.</p><p>In other words;</p><p>Running <em>multiple simulated environments in a single machine without installing and configuring them</em> is called <em>Virtualization</em>.</p><p>Technically speaking;</p><p>Virtualization is an abstract layer that shares the infrastructure resources among various simulated <em>virtual machines</em> without the need to physically set up these environments.</p><p>Diagram (5) displays different virtual Operating systems are running on the same machine and using the same hardware architecture of the underlying machine.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="what-is-a-virtual-machine"><em>What is a Virtual machine</em><a href="#what-is-a-virtual-machine" class="hash-link" aria-label="Direct link to what-is-a-virtual-machine" title="Direct link to what-is-a-virtual-machine">​</a></h3><p>The simulated virtualized environments are called virtual machines or VM.</p><p>Virtual machine is a <em>replication/simulation</em> of an actual physical machine.</p><p>A VM acts like a real physical machine and uses the physical resources of the underlying host OS.</p><p>A VM is a running <em>instance of a real physical machine.</em></p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="need-for-virtualization"><em>Need</em> <em>for</em> <em>virtualization</em><a href="#need-for-virtualization" class="hash-link" aria-label="Direct link to need-for-virtualization" title="Direct link to need-for-virtualization">​</a></h3><p>So; we have an overview of virtualization, let us examine when should we virtualize and what are the benefits of virtualization?</p><ol><li><strong>Better resource management and</strong> <strong>cost-effective</strong>: as indicated in Diagram (6) and Diagram (7); hardware resources are distributed wisely on need basis to different environments; all the virtual machines share the same resources and reduce resource wastage.</li><li><strong>Ease of quick administration and maintenance</strong>: It is easier to build, install, configure one server rather than multiple servers. Updating a patch on various machines from a single virtualized server is much more feasible.</li><li><strong>Disaster recovery</strong>: Since all the virtualized machines reside on the same server and are treated as mounted volumes of data files, it is easier to back up these machines. In case of a disaster failure (power failure, network down, cyber-attacks, failed test code, etc) VM screenshots are used to recover the running state of the machine and the whole setup can be built up within minutes.</li><li><strong>Isolated and independent secure test environment</strong>: virtualization provide an isolated independent virtual test environment to test the legacy code or a vendor-specific product or even a beta release or say a corrupt code without affecting the main hardware and software platform. (This is a contradictory statement though; will discuss more under types of virtualization)<br>These test environments like dev, uat, preprod, prod etc..can be easily tested and discarded.</li><li><strong>Easily scalable and upgradable</strong>: Building up more simulated environments means spinning up more virtual machines. Also upgrading VMs is as good as to run a patch in all VMs.</li><li><strong>Portable</strong>: Virtual machines are lightweight compared to the actual running physical machines; in addition, a VM that includes its own OS, drivers, and other installation files is portable on any machine. One can access the data virtually from any location.</li></ol><p>The screenshot of activity monitor below compares the CPU load:</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="implementation"><em>Implementation</em><a href="#implementation" class="hash-link" aria-label="Direct link to implementation" title="Direct link to implementation">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="a-what-is-hypervisor-and-its-types__"><em>a) What is hypervisor and its types__?</em><a href="#a-what-is-hypervisor-and-its-types__" class="hash-link" aria-label="Direct link to a-what-is-hypervisor-and-its-types__" title="Direct link to a-what-is-hypervisor-and-its-types__">​</a></h3><p>As discussed in the previous section; virtualization is achieved by means of a virtualized layer on top of hardware or a software resource.</p><p>This abstract layer is called a <em>hypervisor.</em></p><p>A hypervisor is a virtual machine monitor (VMM)</p><p>There are 2 types of hypervisors: Diagram (8)</p><ol><li>Type-1 or bare-metal hypervisor</li><li>Type-2 or hosted hypervisor</li></ol><p><em>Type-1 or bare-metal</em> hypervisor is installed directly on the system hardware, thus abstracting and sharing the hardware components with the VMs.</p><p><em>Type-2 or hosted hypervisor</em> is installed on top of the system bootable OS called host OS; this hypervisor abstracts the system resources visible to the host OS and distributes it among the VMs.</p><p>Both have their own role to play in virtualization.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="b-comparing-hypervisor-types"><em>b) Comparing hypervisor types</em><a href="#b-comparing-hypervisor-types" class="hash-link" aria-label="Direct link to b-comparing-hypervisor-types" title="Direct link to b-comparing-hypervisor-types">​</a></h3><p>Type-1 or bare-metal hypervisor</p><p>Type-2 or hosted hypervisor</p><p>Installed <em>directly on the infrastructure</em>-<!-- -->OS independent and more secure against software issues.</p><p>Installed <em>on top of the host OS</em>-<!-- -->more prone to software failures.</p><p><em>Better resource flexibility</em>: Have direct access to the hardware infrastructure (Hard-drive partition, RAM, embedded cards such as NIC). Provide more flexibility and scalability to the VMs and assign resources on a need basis.</p><p><em>Limited resource allocation</em>: Have access to just the resources exposed by the host OS.</p><p>VMs installed will have limited access to hardware resources allocated and exposed by the host OS.</p><p>Single point of failure: A compromised VM may affect the kernel. Extra security layers needed.</p><p>A compromised VM may affect only the host OS, kernel still remains unreachable.</p><p>Low latency due to direct link to the infrastructure.</p><p>High latency as all the VMs have to pass through the OS layer to access the system resources.</p><p>Generally used in Servers</p><p>Generally used on small client machines</p><p>Expensive</p><p>Less expensive</p><p>Type-1 Hypervisors in market:</p><p>VMWare ESX/ESXi</p><p>Hyperkit (OSX)</p><p>Microsoft Hyper-V (Windows)<br>
<!-- -->KVM(Linux)</p><p>Oracle VM Server</p><p>Type-2 Hypervisors in market:</p><p>Oracle VM VirtualBox</p><p>VMWare Workstation</p><p>Parallels desktop for MAC</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="types-of-virtualization"><em>Types of virtualization</em><a href="#types-of-virtualization" class="hash-link" aria-label="Direct link to types-of-virtualization" title="Direct link to types-of-virtualization">​</a></h2><p>Based on what resource is virtualized, there are different classifications of virtualization.</p><p>Server, Storage device, operating system, network</p><p><strong>Desktop</strong> <strong>virtualization</strong>: Entire desktop environment is simulated and distributed to run on a single server all at once. A desktop virtualization allows administrators to manage, install, configure similar setups on many machines. Upgrading all the machines with a single patch update or security checks becomes easier and faster.</p><p><strong>Server</strong> <strong>virtualization</strong>: Many dedicated servers can be virtualized into a single server that provides multi-server functionality.</p><p><strong>Example:</strong></p><p>Many virtual machines can be built up sharing the same underlying system resources.</p><p>Storage, RAM, disks, CPU</p><p><strong>Operating system</strong> <strong>virtualization</strong>: This happens at the kernel level Hypervisor on hardware type 2 bare-metal One machine: Can boot up as multiple OS like Windows or Linux side-by-side</p><p><strong>Application virtualization</strong>: Apps are packaged and stored in a virtual environment and are distributed across different VMs. Example Microsoft applications like excel, MS word, Powerpoint etc, Citrix applications.</p><p><strong>Network functions virtualization</strong>: Physical network components such as NIC cards, switches, routers, servers, hubs, and cables are all assembled in a single server and used virtually by multiple machines without having the load of installing them on every machine.</p><p>Virtualization is one of the building blocks and driving force behind <a href="https://www.ibm.com/cloud/learn/cloud-computing" target="_blank" rel="noopener noreferrer"><em>cloud computing</em></a>.</p><p>Cloud computing provide virtualized need-based services. This has given an uplift to the concept of virtualization.</p><p>A quick mention of various cloud computing models/services are listed below:</p><p><strong>SaaS</strong> – Software as a Service– end-user applications are maintained and run by service providers and easily distributed and used by the end users without having to install them.</p><p>Top SaaS providers: Microsoft (Office suite, CRM, SQL server databases), AWS, Adobe, Oracle (ERP, CRM, SCM), Cisco’s <a href="https://www.webex.com/de/index.html" target="_blank" rel="noopener noreferrer">Webex</a>, <a href="https://github.com/" target="_blank" rel="noopener noreferrer">GitHub</a> ( git hosting web service)</p><p><strong>PaaS</strong> – Platform as a Service – computing infrastructure(hardware/software) is maintained and updated by the service provider and the user just have to run the product over this platform.</p><p>Top Paas providers: <a href="https://aws.amazon.com/elasticbeanstalk/" target="_blank" rel="noopener noreferrer">AWS beanstalk</a>, <a href="https://www.oracle.com/index.html" target="_blank" rel="noopener noreferrer">Oracle Cloud Platform (OCP)</a>, <a href="https://cloud.google.com/appengine/" target="_blank" rel="noopener noreferrer">Google App Engine</a></p><p><strong>IaaS</strong> – Infrastructure as a Service – Provide infrastructure such as servers, physical storage, networking, memory devices etc. Users can build their own platform with customized operating system and applications.</p><p>Key IaaS providers: Amazon Web Services, <a href="https://azure.microsoft.com/en-us/" target="_blank" rel="noopener noreferrer">Microsoft Azure</a>, Google compute engine, Citrix</p><p><strong>Conclusion:</strong></p><p>We now have a fair understanding of types of virtualization and how they are implemented.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="containerization"><strong>Containerization</strong><a href="#containerization" class="hash-link" aria-label="Direct link to containerization" title="Direct link to containerization">​</a></h2><p>Though virtualization has its pros; there are certain downsides of virtualization such as:</p><ul><li>Not all systems can be virtualized always.</li><li>A corrupt VM is sometimes contagious and may affect other VMs or the kernel in-case of a <em>Type-1 or bare-metal</em> hypervisor.</li><li>Latency of virtual disks due to increased payload on the CPU resources with a higher number of VMs</li><li>Unstable performance</li></ul><p>An alternative approach to overcome the above flaws of virtualization is to <em>Containerize</em> the applications and the run-time environment together.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="what-is-containerization"><em>What is containerization</em><a href="#what-is-containerization" class="hash-link" aria-label="Direct link to what-is-containerization" title="Direct link to what-is-containerization">​</a></h2><p><em>Containerization</em> is an OS-level virtualization; wherein the entire build of an application along with run-time environment is encapsulated or bundled up in a package.</p><p>These packages are called <em>containers</em>.</p><p>Containers are lightweight virtualized environments. These are independent of the infrastructure both hardware and software.</p><p>The run-time environment includes the operating system, binaries, libraries, configuration files and other applications as shown in Diagram (9).</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="what-is-a-docker"><em>What is a Docker</em><a href="#what-is-a-docker" class="hash-link" aria-label="Direct link to what-is-a-docker" title="Direct link to what-is-a-docker">​</a></h2><p><em>Dockers</em> provide an excellent framework for containerization and allow to build, ship, and run distributed applications over multiple platforms.</p><p>Docker framework is setup as a <em>docker engine</em> installed on host OS and a <a href="https://www.knowledgehut.com/devops/docker-training" target="_blank" rel="noopener noreferrer">docker</a> <em>daemon</em> (background process) process is started that manage the virtual <em>containers</em>.</p><p>Refer Diagram (10) that shows a Docker engine with 3 containers residing on host OS (MAC OS).</p><p>An instruction file called <em>dockerfile</em> is written with a set of system commands that change the filesystem such as add, copy or delete commands, run commands, install utilities, system calls etc…</p><p>This <em>dockerfile</em> is built and packaged along with its run-time environment as an executable file called a <em>docker image.</em></p><p>Docker daemon services run these images to create <em>docker containers.</em></p><blockquote><p><em>Docker container is a run-time instance of an image</em></p></blockquote><p>It is wise to say that many images (or layers of instruction files) make up a container.</p><p>Docker containers have a compact packaging and each container is well isolated.</p><p>We can run, start, stop, attach, move or delete containers as these runs as services on the host OS.</p><p>Each image is made up of different layers; each image based on top of the other with the customized command changes that we make.</p><p>Every time we make a change in the filesystem, each change related to the image is encapsulated in a new layer of filesystem and stacked up above the parent image.</p><p>Only the changed layers are rebuilt, rest of the unchanged image layers are reused.</p><p>Certain docker commands ADD, RUN and COPY c<em>reate a new layer with increased byte size; rest of the commands simply adds up a new layer with zero-byte size.</em></p><p><em>These layers are re-used to build a new image, hence faster and lightweight.</em></p><p>Docker images are also</p><p>The layer approach of an image every time there is a change in the image makes it possible to Version control the docker images.</p><p>Here is a terminal recording that shows docker engine process and how images and containers are created.</p><p>Docker documentation - to <a href="https://docs.docker.com/get-started/part2/" target="_blank" rel="noopener noreferrer">create containers</a>.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="ppt-diagram"><strong>Ppt diagram:</strong><a href="#ppt-diagram" class="hash-link" aria-label="Direct link to ppt-diagram" title="Direct link to ppt-diagram">​</a></h3><p>Code -&gt; package -&gt; build images -&gt; registry hub -&gt; download/pull image -&gt; run container</p><p>Animation: sheet4</p><p>Let’s consider the docker container: divyabhushan/learn<!-- -->_<!-- -->docker hosted on docker hub.</p><p>Latest tagged image: centOS<!-- -->_<!-- -->release1.2</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="what-is-the-container-environment">What is the container environment?<a href="#what-is-the-container-environment" class="hash-link" aria-label="Direct link to What is the container environment?" title="Direct link to What is the container environment?">​</a></h3><p>Base OS: Centos:7</p><p>Utilities: vim, yum, git</p><p>Apps/files: Dockerfile, myApp.sh, runtests.sh, data and other supporting files.</p><p>Git source code: <a href="https://github.com/divyabhushan/DockerImages_Ubuntu.git" target="_blank" rel="noopener noreferrer">dockerImages</a></p><p>Download as: git clone <a href="https://github.com/divyabhushan/DockerImages_Ubuntu.git" target="_blank" rel="noopener noreferrer">https://github.com/divyabhushan/DockerImages<!-- -->_<!-- -->Ubuntu.git</a></p><p>What does the container do?<br>
<!-- -->Container launches “myApp.sh” in Ubuntu:14.04 environment and run some scripts along with a set of post test<!-- -->_<!-- -->suites in the container (Ubuntu:14.04) and saves the output log file.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="how-to-modify-and-build-your-own-app"><em>How to modify and build your own app</em><a href="#how-to-modify-and-build-your-own-app" class="hash-link" aria-label="Direct link to how-to-modify-and-build-your-own-app" title="Direct link to how-to-modify-and-build-your-own-app">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="step-1-pull"><strong>Step 1: pull</strong><a href="#step-1-pull" class="hash-link" aria-label="Direct link to step-1-pull" title="Direct link to step-1-pull">​</a></h3><p><strong>1.1: Pull the docker image</strong></p><p><strong>1.2: Run image to create a container and exit</strong></p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="step-2-modify"><strong>Step 2: modify</strong><a href="#step-2-modify" class="hash-link" aria-label="Direct link to step-2-modify" title="Direct link to step-2-modify">​</a></h3><p>2.1: Start the container</p><p>2.2: Attach to the container and make some changes</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="step-3-commit"><strong>Step 3: commit</strong><a href="#step-3-commit" class="hash-link" aria-label="Direct link to step-3-commit" title="Direct link to step-3-commit">​</a></h3><p>3.1: Examine the history logs and changes in the container</p><p>3.2: Commit the changes in container</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="step-4-push"><strong>Step 4: push</strong><a href="#step-4-push" class="hash-link" aria-label="Direct link to step-4-push" title="Direct link to step-4-push">​</a></h3><p>4.1: Push new image to docker hub</p><p>Let us see the steps in action:</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="step-1-pull-1"><strong>Step 1: pull</strong><a href="#step-1-pull-1" class="hash-link" aria-label="Direct link to step-1-pull-1" title="Direct link to step-1-pull-1">​</a></h3><p>docker image on your machine</p><p>1.1: Pull the docker image</p><p><strong>Command:</strong></p><p>docker pull divyabhushan/learn<!-- -->_<!-- -->docker:myApp<!-- -->_<!-- -->ubuntu<!-- -->_<!-- -->14.04</p><p>View the image on system</p><p>docker images</p><p>screenshot</p><p><strong>Command:</strong></p><p>docker run -it --name ubuntu14.04 0a6f949131a6</p><p>Run command in ubuntu container and exit, the container is stopped on exiting out.</p><p>View the stopped container with the ‘ps -a’ command.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="step-2-modify-1"><strong>Step 2: modify</strong><a href="#step-2-modify-1" class="hash-link" aria-label="Direct link to step-2-modify-1" title="Direct link to step-2-modify-1">​</a></h3><p>Start the container</p><p><strong>Command:</strong></p><p>docker start &lt;container<!-- -->_<!-- -->id&gt;</p><p>Now the container is listed as a running process Attach to the container and make some changes</p><p><strong>Command:</strong></p><p>docker attach 7d0d0225778c</p><p>edit the ‘git configuration’ file and ‘myApp.sh’ script</p><p>Container is modified and stopped</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="step-3-commit-1"><strong>Step 3: commit</strong><a href="#step-3-commit-1" class="hash-link" aria-label="Direct link to step-3-commit-1" title="Direct link to step-3-commit-1">​</a></h3><p>Examine the history logs and changes in the container</p><p>The changes done inside the container filesystem can be viewed using the ‘docker diff’ command as:</p><p><strong>Command:</strong> </p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token function" style="color:rgb(130, 170, 255)">docker</span><span class="token plain"> </span><span class="token function" style="color:rgb(130, 170, 255)">diff</span><span class="token plain"> 7d0d0225778c</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Commit the changes in container</p><p>Docker commit:</p><p>Usage: docker commit <!-- -->[<!-- -->OPTIONS<!-- -->]<!-- --> CONTAINER <!-- -->[<!-- -->REPOSITORY<!-- -->[<!-- -->:TAG<!-- -->]<!-- -->]</p><p>docker commit -m 'new Ubuntu image' 7d0d0225778c divyabhushan/learn<!-- -->_<!-- -->docker:ubuntu14.04<!-- -->_<!-- -->v2</p><p>New image is created and listed</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="step-4-push-1"><strong>Step 4: push</strong><a href="#step-4-push-1" class="hash-link" aria-label="Direct link to step-4-push-1" title="Direct link to step-4-push-1">​</a></h3><p>Push new image to docker hub</p><p><strong>Command:</strong></p><p>docker push divyabhushan/learn<!-- -->_<!-- -->docker:ubuntu14.04<!-- -->_<!-- -->v2</p><p>Point to note: just the latest commit change layer ‘50a5ce553bba’ has been pushed, while the other layers were re-used.</p><p>Image available on docker hub:</p><p>The latest tagged image can now be pulled from other machines; and run to create the same container environment.</p><p><strong>Conclusion</strong>: An image was pulled and run to create a container to replicate the environment. Container was modified, new changes were committed to form a new image. New Image pushed back on the docker hub and now available as a new tag ready to be pulled by other machines.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="difference-between-dockers-and-virtual-machines"><strong>Difference between Dockers and Virtual machines</strong><a href="#difference-between-dockers-and-virtual-machines" class="hash-link" aria-label="Direct link to difference-between-dockers-and-virtual-machines" title="Direct link to difference-between-dockers-and-virtual-machines">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="tabular-differences-on-various-parameters"><em>Tabular differences on various parameters</em><a href="#tabular-differences-on-various-parameters" class="hash-link" aria-label="Direct link to tabular-differences-on-various-parameters" title="Direct link to tabular-differences-on-various-parameters">​</a></h3><table><thead><tr><th>Parameters</th><th>VMs</th><th>Dockers</th></tr></thead><tbody><tr><td>architecture</td><td>Hardware-level virtualization. Each VM has its own copy of OS.</td><td>Software level virtualization. Dockers have no own OS, run on host OS</td></tr><tr><td>Isolation</td><td>Fully isolated</td><td>Process or application-level isolation.</td></tr><tr><td>Installation</td><td>Hypervisor can run directly on the hardware resources or on the host OS.</td><td>Docker engine is installed on top of the host OS. A docker daemon process is initiated on the host OS. There is no separate OS for every container.</td></tr><tr><td>CPU processing + performance</td><td>Slower: A VM contains the entire run-time environment that has to be loaded every time. Uses more CPU cycles; gives unstable performance.</td><td>Faster: Docker images are pre-built and share host resources as a result running an image as a container is lightweight and consumes less CPU cycle; gives a stable performance</td></tr><tr><td>Hardware storage</td><td>More storage space as each VM is an independent machine (OS). Example: 3 VMs of 800MB each will take 2.4 GB of space.</td><td>Docker containers are lightweight since do not require to load OS+drivers, run on host OS as processes.</td></tr><tr><td>Portable</td><td>Dependency on host OS and hardware makes VM less portable. Importing a VM still requires manual setup such storage, RAM and network.</td><td>Highly portable since lightweight and zero dependency on hardware.</td></tr><tr><td>Scalable and code-reusability</td><td>Spinning up more VMs still need administrative tasks such as distributing resources to VM. Running a new machine puts extra load on the system resources also re-managing earlier VMs becomes a task. Every VM keeps its own copy of resources-poor code-reusability.</td><td>Spinning up new docker containers simply means running pre-built images into containers as a process inside host OS. Containers are also configured on-the-fly passing parameters and run-time. Single image can be run and used to create many containers; encourage code-reusability</td></tr><tr><td>Resource utilization</td><td>Static allocation results in resource wastage in case of idle VMs or if a VM’s resource requirement increases.</td><td>Resources are dynamically allocated and de-allocated on the need basis by the docker engine.</td></tr><tr><td>Docker system prune or garbage collection</td><td>Virtual machines do not have an in-built prune mechanism, these have to be administered manually.</td><td>Docker image and containers can be pruned; which frees up a sensible amount of storage and memory space and CPU cycles.</td></tr><tr><td>New environment</td><td>Creating new VM from the scratch is a tedious, repetitive tasks. It involves installing a new OS, loading kernel drivers and other tools and configurations.</td><td>Package the code and dependency files, build into an image, run the image to create a new container. Use an existing or a base image (dockerhub- scratch) to run and create more containers on the go.</td></tr><tr><td>Web-hosted Hub</td><td>No web hosted hub for VMs</td><td>dockerHub provides an open-source reliable trusted source of pre-built images that can be downloaded to run new containers.</td></tr><tr><td>Version control (backup, restore,track history)(refer git)</td><td>Snapshot of VMs are not very user-friendly and consume more space.</td><td>Docker images are version controlled.&nbsp;Every delta difference in each docker container can easily be viewed (demo: docker diff ).&nbsp;Any change in the image is stored as a different layered version. A reference link to older images saves build time and space.</td></tr><tr><td>Auto-build</td><td>Automation of creating VMs is not very feasible.</td><td>Docker images can also be auto-built from every source code check-in to GitHub (Automated builds on Dockerhub)</td></tr><tr><td>Disaster recovery</td><td>Tedious to recover from VM backup files.</td><td>Easier to restore docker images (like files) just like git source files in case images are version controlled. Backup images only have to be run to create containers. (refer: screenshot).</td></tr><tr><td>Update</td><td>All the VMs have to updated with the release patch.</td><td>A single image is updated, re-built and distributed across multiple platforms.</td></tr><tr><td>Memory usage+speed</td><td>Slower: Entire snapshot of a machine and the OS is loaded into the cache memory.</td><td>Real-time and fast: pre-built images. Only the instance, i.e, a container has to be run as a process and uses memory like an executable</td></tr><tr><td>Data integrity</td><td>VM behavior may change if the dependency includes beyond the VM boundaries. (example: an app depends on production host network settings)</td><td>Same behavior of apps in any environment</td></tr><tr><td>security</td><td>More secure: A failure inside a VM may reach its guest OS but not the host OS or other virtual machines. Type-2 hypervisor though has a risk of kernel attack.</td><td>Less secure: If a docker container compromised; underlying OS and hence all the containers may be affected since they share the same host kernel. OS Kernel may also be risked.</td></tr><tr><td>Key providers</td><td>Red hat KVM, VMWare, Oracle VM VirtualBox, Mircrosoft Hyper-V, Citrix XenServer</td><td>Dockers,&nbsp;Google kubernetes Engine,&nbsp;AWS Elastic Container service</td></tr><tr><td>Data authentication</td><td>Lot of software licenses.</td><td>Docker maintains inbuilt content trust to verify published images.</td></tr></tbody></table><h2 class="anchor anchorWithStickyNavbar_LWe7" id="when-to-use-vm-or-a-docker"><em>When to use VM or a Docker</em><a href="#when-to-use-vm-or-a-docker" class="hash-link" aria-label="Direct link to when-to-use-vm-or-a-docker" title="Direct link to when-to-use-vm-or-a-docker">​</a></h2><p>When the need is an isolated OS, go for VMs.</p><p>For a hardware and software independent isolated application that needs fast distribution on multiple environments, use dockers.</p><ul><li><h3 class="anchor anchorWithStickyNavbar_LWe7" id="docker-use-case">Docker use-case:<a href="#docker-use-case" class="hash-link" aria-label="Direct link to Docker use-case:" title="Direct link to Docker use-case:">​</a></h3></li></ul><p>Example: A database application along with its database</p><p>Consider the docker image - <a href="https://hub.docker.com/_/oracle-weblogic-server-12c?tab=description" target="_blank" rel="noopener noreferrer">Oracle WebLogic Server</a> on <a href="https://hub.docker.com/" target="_blank" rel="noopener noreferrer">Docker Hub</a>.</p><p>This image is pre-built Oracle WebLogic Server runtime environment, including Oracle Linux 7 and Oracle JDK 8 for deploying Java EE applications.</p><p>To create Server configurations on any machine, just download this image and run to create and start a container.</p><p>There is no need to install and configure JDK, Linux or other run-time environment.</p><ul><li><h3 class="anchor anchorWithStickyNavbar_LWe7" id="do-not-use-docker-use-case">Do not use Docker use-case:<a href="#do-not-use-docker-use-case" class="hash-link" aria-label="Direct link to Do not use Docker use-case:" title="Direct link to Do not use Docker use-case:">​</a></h3></li></ul><p>The application depends on utility outside the docker container.</p><p>Code developed on dev machine with base OS as MAC; needs certain firewall setting on say Ubuntu OS.</p><p>How can the code be tested on the production ubuntu OS firewall while running from MAC OS docker container?</p><p>Solution:  Install a virtualization software on host OS-MAC; Create a VM (Virtual machine) with host OS as Ubuntu (same as production environment).</p><p>Configure the desired firewall settings on host VM – Ubuntu; import the test code inside Ubuntu and test.</p><ul><li><h3 class="anchor anchorWithStickyNavbar_LWe7" id="use-a-vm">Use a VM:<a href="#use-a-vm" class="hash-link" aria-label="Direct link to Use a VM:" title="Direct link to Use a VM:">​</a></h3></li></ul><p>For Embedded systems programming, a VM is installed that connects to the system device drivers, controllers and kernel.</p><ul><li><h3 class="anchor anchorWithStickyNavbar_LWe7" id="virtualization-used-along-with-docker">Virtualization used along with docker:<a href="#virtualization-used-along-with-docker" class="hash-link" aria-label="Direct link to Virtualization used along with docker:" title="Direct link to Virtualization used along with docker:">​</a></h3></li></ul><p>An extension to the previous scenario would be if you would want to also test your python application in the host OS-Ubuntu VM without having to set up the python exe and its libraries and binaries.</p><p>All you have to do is: Install <a href="https://www.knowledgehut.com/devops/docker-training" target="_blank" rel="noopener noreferrer">Docker</a> engine for Ubuntu OS and pull the python image from Docker hub as:</p><p>docker pull python:tag <!-- -->[<!-- --> tag is the python version-choose the appropriate version <!-- -->]</p><p>docker pull python:2.7</p><p>Refer: <a href="https://hub.docker.com/_/python/" target="_blank" rel="noopener noreferrer">Python image</a></p><p>Either write a Dockerfile to import/copy entire source code to python environment or directly run the image passing the script path as below:</p><p>Command:</p><p>$docker run -it --name my-python-script -v “$PWD”:/usr/src/myapp -w /usr/src/myapp python:2.7 python my-application.py</p><p>Command options:</p><p>-<!-- -->v = volume list-bind mount a volume <!-- -->[<!-- -->mount present working directory onto /usr/src/myapp inside container<!-- -->]</p><p>-<!-- -->w = workdir string-working directory inside the container</p><p>Moreover; you can also test your python code in more than one version by downloading different python images, running them to create different containers and running your app in each container.</p><p>What’s exciting here is that once the code tested in each python environment; you could quickly work on the test results and drop the containers. And deploy the code to production only once code tested against various python versions.</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="final-thoughts"><em>Final thoughts</em><a href="#final-thoughts" class="hash-link" aria-label="Direct link to final-thoughts" title="Direct link to final-thoughts">​</a></h4><p>VMs and dockers are compatible with each other. Dockers are not here to replace Virtual machines.</p><p>Both serve the same purpose of virtualizing the computing and infrastructure resources for optimized utilization.</p><p>Using both Virtual machines and dockers together can yield better results in virtualization.</p><p>When one desires a fast, lightweight, portable and highly scalable hardware-independent environment for multiple applications isolation; wherein security is not the major concern; Dockers is the best choice.</p><p>Use a VM for embedded systems that are integrated with hardware; such as device driver or kernel coding.</p><p>A scenario simulating an infrastructure setup with a high resource control and dependency on system resources; VMs are a better choice.</p><p>Use of Dockers inside VM</p><p>CI/CD pipelines scenario:</p><p>Virtualization enables a smooth CI/CD process flow by promoting the users to concentrate only on developing the code on a working system that is set up for automated continuous integration and deployment without having to duplicate the entire setup each time.</p><p>A virtualized environment is set up; either using a VM or a docker image that takes care of the automatic code check-ins, builds, regression testing, and deployments on the server.</p><blockquote><p>Originally posted on <a href="https://www.knowledgehut.com/blog/devops/docker-vs-vm" target="_blank" rel="noopener noreferrer">KnowledgeHut</a></p></blockquote>]]></content>
        <author>
            <name>Divya Bhushan</name>
            <uri>https://github.com/divyabhushan</uri>
        </author>
    </entry>
</feed>